# handlers.py
import asyncio
import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler
# –£–¥–∞–ª—ë–Ω –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∏–º–ø–æ—Ä—Ç –∏–∑ hyperliquid; –≤–º–µ—Å—Ç–æ –Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
# from cryptography.fernet import Fernet
# from hyperliquid.utils.signing import private_key_to_address

import database
import hyperliquid_api
import trading
from config import DEFAULT_TRADE_THRESHOLD_USD, DB_FILE
from logging_utils import logger


def clean_address(args: tuple) -> str | None:
    """–û—á–∏—â–∞–µ—Ç –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞."""
    if not args:
        return None
    address = args[0].strip().strip('<>').lower()
    return address if (address.startswith("0x") and len(address) == 42) else None


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ø–æ–ª—É—á–∏—Ç—å EVM-–∞–¥—Ä–µ—Å –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–∞–∫–µ—Ç eth-keys (–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ requirements.txt)
def _derive_address_from_private_key(private_key: str) -> str:
    try:
        from eth_keys import keys
        hex_key = private_key[2:] if private_key.startswith("0x") else private_key
        if len(hex_key) != 64:
            raise ValueError("Invalid hex length")
        pk_bytes = bytes.fromhex(hex_key)
        addr = keys.PrivateKey(pk_bytes).public_key.to_checksum_address()
        return addr.lower()
    except Exception as e:
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á") from e


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏."""
    chat_id = update.effective_chat.id
    user_name = update.effective_user.first_name or "–¢—Ä–µ–π–¥–µ—Ä"

    # –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Ä–æ–≥ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –∫–∞–∂–¥–æ–º /start
    # –ë–µ—Ä—ë–º —Ç–µ–∫—É—â–∏–π –ø–æ—Ä–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î (–µ—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–∏, –≤–µ—Ä–Ω—ë—Ç—Å—è DEFAULT_TRADE_THRESHOLD_USD)
    threshold = database.get_user_threshold(chat_id)
    order_threshold = database.get_user_order_threshold(chat_id)

    welcome_message = f"""<b>üêã Hyperliquid Whale Bot (Beta)</b>
<i>by walqed</i> ‚ú®

–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã

<b>üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞–º–∏:</b>
/add <b>–∞–¥—Ä–µ—Å</b> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª–µ–∫
/remove <b>–∞–¥—Ä–µ—Å</b> ‚Äî —É–¥–∞–ª–∏—Ç—å –∫–æ—à–µ–ª–µ–∫  
/list ‚Äî –º–æ–∏ –∫–æ—à–µ–ª—å–∫–∏
/wallet_activity <b>–∞–¥—Ä–µ—Å</b> ‚Äî –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–æ—à–µ–ª—å–∫–∞
/set_threshold <b>—Å—É–º–º–∞</b> ‚Äî –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
/set_order_threshold <b>—Å—É–º–º–∞</b> ‚Äî –ø–æ—Ä–æ–≥ –¥–ª—è –æ—Ä–¥–µ—Ä–æ–≤

<b>üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞:</b>
/positions <b>–∞–¥—Ä–µ—Å</b> ‚Äî –ø–æ–∑–∏—Ü–∏–∏ –∫–æ—à–µ–ª—å–∫–∞
/leaderboard <b>[daily/weekly/monthly]</b> <b>[desktop|mobile]</b> ‚Äî —Ç–æ–ø —Ç—Ä–µ–π–¥–µ—Ä—ã
/top_positions <b>[period] [N]</b> ‚Äî –ø–æ–∑–∏—Ü–∏–∏ —Ç–æ–ø-N —Ç—Ä–µ–π–¥–µ—Ä–æ–≤

<b>üìà –¢–æ—Ä–≥–æ–≤–ª—è :</b>
/trade ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞–º–∏
/orders ‚Äî –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
/balance ‚Äî –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞

<b>‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞:</b>
/help ‚Äî –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Ä–º–∏–Ω–∞—Ö

üí∞ –¢–µ–∫—É—â–∏–π –ø–æ—Ä–æ–≥ —Å–¥–µ–ª–æ–∫: <code>${threshold:,.0f}</code>
üß± –ü–æ—Ä–æ–≥ –¥–ª—è –æ—Ä–¥–µ—Ä–æ–≤: <code>${order_threshold:,.0f}</code>
    """

    await update.message.reply_html(welcome_message)


async def add_wallet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è."""
    message = update.message.text.strip()
    parts = message.split()

    if len(parts) != 2:
        await update.message.reply_html(
            "<b>‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å</b>\n\n"
            "üîé –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞"
        )
        return

    address = parts[1]

    if not (address.startswith("0x") and len(address) == 42):
        await update.message.reply_html(
            "<b>‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å</b>\n\n"
            "üîé –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞"
        )
        return

    database.add_wallet_to_db(update.effective_chat.id, address)

    threshold = database.get_user_threshold(update.effective_chat.id)

    # –°–æ–æ–±—â–µ–Ω–∏–µ-—Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await update.message.reply_html(
        f"<b>‚úÖ –ö–æ—à–µ–ª–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω</b>\n\n"
        f"üîî –ü–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: <code>${threshold:,.0f}</code>"
    )




async def remove_wallet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª—è–µ—Ç –∫–æ—à–µ–ª–µ–∫ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è."""
    address = clean_address(context.args)
    if not address:
        await update.message.reply_html(
            "<b>‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å</b>\n\n"
            "üîç –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /remove <code>–∞–¥—Ä–µ—Å</code>"
        )
        return

    database.remove_wallet_from_db(update.effective_chat.id, address)
    await update.message.reply_html(
        f"<b>üóëÔ∏è –ö–æ—à–µ–ª–µ–∫ —É–¥–∞–ª–µ–Ω</b>\n\n"
        f"üìù <code>{address}</code>"
    )


async def list_wallets(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤."""
    wallets = database.get_wallets_for_user(update.effective_chat.id)
    threshold = database.get_user_threshold(update.effective_chat.id)

    if not wallets:
        await update.message.reply_html(
            "<b>üì≠ –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç</b>\n\n"
            "‚ûï –î–æ–±–∞–≤—å—Ç–µ –∫–æ—à–µ–ª–µ–∫: <code>/add [–∞–¥—Ä–µ—Å_–∫–æ—à–µ–ª—å–∫–∞]</code>\n"
            "üí° <i>–ù–∞—á–Ω–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫—Ä—É–ø–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –∫–∏—Ç–æ–≤!</i>"
        )
        return

    wallets_text = "\n".join([f"üîç <code>{w}</code>" for w in wallets])
    message = (
        f"<b>üìã –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–æ—à–µ–ª—å–∫–∏ ({len(wallets)})</b>\n\n"
        f"{wallets_text}\n\n"
        f"üîî –ü–æ—Ä–æ–≥: <code>${threshold:,.0f}</code>"
    )
    await update.message.reply_html(message)


async def set_threshold_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ—Ä–æ–≥ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    chat_id = update.effective_chat.id
    current = database.get_user_threshold(chat_id)

    if not context.args:
        await update.message.reply_html(
            f"<b>‚öôÔ∏è –¢–µ–∫—É—â–∏–π –ø–æ—Ä–æ–≥: <code>${current:,.0f}</code></b>\n\n"
            f"‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å: <code>/set_threshold 50000</code>\n"
            f"üí° <i>–ß–µ–º –≤—ã—à–µ –ø–æ—Ä–æ–≥, —Ç–µ–º —Ä–µ–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</i>"
        )
        return

    try:
        threshold = float(context.args[0])
        if threshold <= 0:
            raise ValueError()

        database.set_user_threshold(chat_id, threshold)
        await update.message.reply_html(
            f"<b>‚úÖ –ü–æ—Ä–æ–≥ –æ–±–Ω–æ–≤–ª–µ–Ω</b>\n\n"
            f"üÜï –ù–æ–≤—ã–π: <code>${threshold:,.0f}</code>\n"
            f"üîî –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–¥–µ–ª–∫–∞—Ö –æ—Ç <code>${threshold:,.0f}</code>"
        )
    except (ValueError, IndexError):
        await update.message.reply_html(
            "<b>‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>\n\n"
            "üîç –ü—Ä–∏–º–µ—Ä: <code>/set_threshold 100000</code>\n"
            "üí∞ –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö"
        )


async def set_order_threshold_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ—Ä–æ–≥ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ—Ä–¥–µ—Ä–∞—Ö (—Ä–∞–∑–º–µ—â–µ–Ω–∏–µ/–æ—Ç–º–µ–Ω–∞)."""
    chat_id = update.effective_chat.id
    current = database.get_user_order_threshold(chat_id)

    if not context.args:
        await update.message.reply_html(
            f"<b>‚öôÔ∏è –¢–µ–∫—É—â–∏–π –ø–æ—Ä–æ–≥ –æ—Ä–¥–µ—Ä–æ–≤: <code>${current:,.0f}</code></b>\n\n"
            f"‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å: <code>/set_order_threshold 50000</code>\n"
            f"üí° <i>–≠—Ç–æ—Ç –ø–æ—Ä–æ–≥ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫ —Å–æ–±—ã—Ç–∏—è–º —Ä–∞–∑–º–µ—â–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–æ–≤. –î–ª—è —Å–¥–µ–ª–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_threshold</i>"
        )
        return

    try:
        threshold = float(context.args[0])
        if threshold <= 0:
            raise ValueError()

        database.set_user_order_threshold(chat_id, threshold)
        await update.message.reply_html(
            f"<b>‚úÖ –ü–æ—Ä–æ–≥ –æ—Ä–¥–µ—Ä–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω</b>\n\n"
            f"üÜï –ù–æ–≤—ã–π: <code>${threshold:,.0f}</code>\n"
            f"üîî –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ä–¥–µ—Ä–∞—Ö –æ—Ç <code>${threshold:,.0f}</code>"
        )
    except (ValueError, IndexError):
        await update.message.reply_html(
            "<b>‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>\n\n"
            "üîç –ü—Ä–∏–º–µ—Ä: <code>/set_order_threshold 100000</code>\n"
            "üí∞ –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö"
        )


async def positions_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∫–æ—à–µ–ª—å–∫–∞."""
    address = clean_address(context.args)
    if not address:
        await update.message.reply_html(
            "<b>‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã</b>\n\n"
            "üìù –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∞–¥—Ä–µ—Å\n"
            "üí° –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/top_positions</code> —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–∑–∏—Ü–∏–∏ —Ç–æ–ø-—Ç—Ä–µ–π–¥–µ—Ä–æ–≤"
        )
        return

    loading_msg = await update.message.reply_html(
        "<b>‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–∑–∏—Ü–∏–π...</b>"
    )

    loop = asyncio.get_running_loop()
    data = await loop.run_in_executor(None, hyperliquid_api.get_user_positions_with_sdk, address)
    open_orders = await loop.run_in_executor(None, hyperliquid_api.get_open_orders, address)
    message = hyperliquid_api.format_user_positions(address, data)

    # –ù–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ—Ä–¥–µ—Ä–∞ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º - —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É 2
    # orders_text —É–±–∏—Ä–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã

    # –†–æ–ª—å –∞–¥—Ä–µ—Å–∞ –≤—ã–≤–æ–¥–∏–º, –µ—Å–ª–∏ –ø—É—Å—Ç—ã –ø–æ–∑–∏—Ü–∏–∏ –ò–õ–ò –ø—É—Å—Ç—ã –æ—Ä–¥–µ—Ä–∞
    positions_empty = not (data and (data.get('assetPositions') or []))
    orders_empty = (not open_orders or len(open_orders) == 0)
    if positions_empty or orders_empty:
        role_data = await loop.run_in_executor(None, hyperliquid_api.get_user_role, address)
        role_info = ""
        if role_data:
            role = role_data.get('role', 'unknown')
            if role == 'user':
                role_info = "üë§ –æ–±—ã—á–Ω—ã–π"
            elif role == 'subAccount':
                master = role_data.get('master', 'N/A')
                role_info = f"üîó —Å—É–±–∞–∫–∫–∞—É–Ω—Ç –º–∞—Å—Ç–µ—Ä–∞ {master[:10]}..."
            elif role == 'vault':
                role_info = "üè¶ vault"
            elif role == 'agent':
                role_info = "ü§ñ –∞–≥–µ–Ω—Ç"
            else:
                role_info = role
        else:
            role_info = "‚ùì –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        message += f"\n‚ÑπÔ∏è –†–æ–ª—å –∞–¥—Ä–µ—Å–∞: {role_info}"

    # –î–æ–ø. –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–ø–æ—Ç–∞ –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞ ‚Äî –µ—Å–ª–∏ –ø—É—Å—Ç–æ –∏ —Ç–∞–º, –∏ —Ç–∞–º
    if positions_empty and orders_empty:
        spot_balances = (data.get('balances', []) if isinstance(data, dict) else []) or []
        significant_balances = [b for b in spot_balances if float(b.get('total', 0) or 0) > 100]
        spot_info = ""
        if significant_balances:
            spot_coins = [b.get('coin', 'N/A') for b in significant_balances[:3]]
            spot_info = f"\nüí∞ –°–ø–æ—Ç: {', '.join(spot_coins)}"
            if len(significant_balances) > 3:
                spot_info += f" +{len(significant_balances)-3}"

        message += (
            f"{spot_info}\n"
            f"üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ª–∏–º–∏—Ç–Ω—ã–µ –∑–∞—è–≤–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤. "
            f"–ï—Å–ª–∏ –º–∞—Ä–∫–µ—Ç-–æ—Ä–¥–µ—Ä –±—ã–ª –∏—Å–ø–æ–ª–Ω–µ–Ω –∏ –ø–æ–∑–∏—Ü–∏—è —Å—Ä–∞–∑—É –∑–∞–∫—Ä—ã–ª–∞—Å—å, –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å."
        )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í–ø–µ—Ä–µ–¥" –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ—Ä–¥–µ—Ä–∞–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ 2
    keyboard = []
    if open_orders and len(open_orders) > 0:  # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ä–¥–µ—Ä–∞
        keyboard.append([InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞ ‚ñ∂Ô∏è", callback_data=f"orders_page_2_{address}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    max_length = 4000  # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å –¥–ª—è –∫–Ω–æ–ø–æ–∫
    if len(message) <= max_length:
        await context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=loading_msg.message_id,
            text=message,
            parse_mode='HTML',
            reply_markup=reply_markup
        )
    else:
        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
        parts = []
        current_part = ""
        lines = message.split('\n')
        
        for line in lines:
            if len(current_part + line + '\n') <= max_length:
                current_part += line + '\n'
            else:
                if current_part:
                    parts.append(current_part.rstrip())
                current_part = line + '\n'
        
        if current_part:
            parts.append(current_part.rstrip())
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Å—Ç–∏ –≤ context –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        context.user_data['message_parts'] = parts
        context.user_data['current_part'] = 0
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = []
        if len(parts) > 1:
            keyboard.append([
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="nav_prev"),
                InlineKeyboardButton(f"1/{len(parts)}", callback_data="nav_info"),
                InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data="nav_next")
            ])
        
        reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=loading_msg.message_id,
            text=parts[0],
            parse_mode='HTML',
            reply_markup=reply_markup
        )


async def leaderboard_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–∏–¥–µ—Ä–±–æ—Ä–¥ —Ç—Ä–µ–π–¥–µ—Ä–æ–≤."""
    # –†–∞–∑–±–æ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤: –¥–æ–ø—É—Å–∫–∞–µ–º –≤ –ª—é–±–æ–º –ø–æ—Ä—è–¥–∫–µ timeframe –∏ —Å—Ç–∏–ª—å
    args = [a.lower() for a in (context.args or [])]
    timeframe = 'daily'
    style_override: str | None = None
    for a in args:
        if a in ['daily', 'weekly', 'monthly']:
            timeframe = a
        elif a in ['desktop', 'mobile']:
            style_override = a

    timeframe_emoji = {
        'daily': 'üìÖ',
        'weekly': 'üìÜ',
        'monthly': 'üóìÔ∏è'
    }

    loading_msg = await update.message.reply_html(
        f"<b>‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞...</b>\n{timeframe_emoji.get(timeframe, 'üìÖ')} –ü–µ—Ä–∏–æ–¥: {timeframe}"
    )

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞: –ø–æ –±–∞–∑–µ (desktop –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –≤ –∫–æ–º–∞–Ω–¥–µ
    chat_id = update.effective_chat.id
    pref = database.get_user_format_preference(chat_id)
    chosen = style_override if style_override in ('desktop', 'mobile') else pref
    style = 'mobile' if chosen == 'mobile' else 'desktop'

    loop = asyncio.get_running_loop()
    data = await loop.run_in_executor(None, hyperliquid_api.get_leaderboard_data_sync)
    message = hyperliquid_api.format_leaderboard_message(data, timeframe, style=style)

    await context.bot.edit_message_text(
        chat_id=update.effective_chat.id,
        message_id=loading_msg.message_id,
        text=message,
        parse_mode='HTML'
    )


# –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞: –ø–æ–∑–∏—Ü–∏–∏ —Ç–æ–ø-N –∞–¥—Ä–µ—Å–æ–≤ –∏–∑ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
async def positions_command_with_address(update: Update, context: ContextTypes.DEFAULT_TYPE, address: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞."""
    loop = asyncio.get_running_loop()
    data = await loop.run_in_executor(None, hyperliquid_api.get_user_positions_with_sdk, address)
    open_orders = await loop.run_in_executor(None, hyperliquid_api.get_open_orders, address)
    message = hyperliquid_api.format_user_positions(address, data)

    # –†–æ–ª—å –∞–¥—Ä–µ—Å–∞ –≤—ã–≤–æ–¥–∏–º, –µ—Å–ª–∏ –ø—É—Å—Ç—ã –ø–æ–∑–∏—Ü–∏–∏ –ò–õ–ò –ø—É—Å—Ç—ã –æ—Ä–¥–µ—Ä–∞
    positions_empty = not (data and (data.get('assetPositions') or []))
    orders_empty = (not open_orders or len(open_orders) == 0)
    if positions_empty or orders_empty:
        role_data = await loop.run_in_executor(None, hyperliquid_api.get_user_role, address)
        role_info = ""
        if role_data:
            role = role_data.get('role', 'unknown')
            if role == 'user':
                role_info = "üë§ –æ–±—ã—á–Ω—ã–π"
            elif role == 'subAccount':
                master = role_data.get('master', 'N/A')
                role_info = f"üîó —Å—É–±–∞–∫–∫–∞—É–Ω—Ç –º–∞—Å—Ç–µ—Ä–∞ {master[:10]}..."
            elif role == 'vault':
                role_info = "üè¶ vault"
            elif role == 'agent':
                role_info = "ü§ñ –∞–≥–µ–Ω—Ç"
            else:
                role_info = role
        else:
            role_info = "‚ùì –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        message += f"\n‚ÑπÔ∏è –†–æ–ª—å –∞–¥—Ä–µ—Å–∞: {role_info}"

    # –î–æ–ø. –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–ø–æ—Ç–∞ –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞ ‚Äî –µ—Å–ª–∏ –ø—É—Å—Ç–æ –∏ —Ç–∞–º, –∏ —Ç–∞–º
    if positions_empty and orders_empty:
        spot_balances = (data.get('balances', []) if isinstance(data, dict) else []) or []
        significant_balances = [b for b in spot_balances if float(b.get('total', 0) or 0) > 100]
        spot_info = ""
        if significant_balances:
            spot_coins = [b.get('coin', 'N/A') for b in significant_balances[:3]]
            spot_info = f"\nüí∞ –°–ø–æ—Ç: {', '.join(spot_coins)}"
            if len(significant_balances) > 3:
                spot_info += f" +{len(significant_balances)-3}"

        message += (
            f"{spot_info}\n"
            f"üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ª–∏–º–∏—Ç–Ω—ã–µ –∑–∞—è–≤–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤. "
            f"–ï—Å–ª–∏ –º–∞—Ä–∫–µ—Ç-–æ—Ä–¥–µ—Ä –±—ã–ª –∏—Å–ø–æ–ª–Ω–µ–Ω –∏ –ø–æ–∑–∏—Ü–∏—è —Å—Ä–∞–∑—É –∑–∞–∫—Ä—ã–ª–∞—Å—å, –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å."
        )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í–ø–µ—Ä–µ–¥" –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ—Ä–¥–µ—Ä–∞–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ 2
    keyboard = []
    if open_orders and len(open_orders) > 0:  # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ä–¥–µ—Ä–∞
        keyboard.append([InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞ ‚ñ∂Ô∏è", callback_data=f"orders_page_2_{address}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await context.bot.edit_message_text(
        chat_id=update.effective_chat.id,
        message_id=update.callback_query.message.message_id,
        text=message,
        parse_mode='HTML',
        reply_markup=reply_markup
    )


async def top_positions_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ—Ç –∞–¥—Ä–µ—Å–∞ –∏–∑ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Ö –ø–æ–∑–∏—Ü–∏–∏.
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /top_positions [daily|weekly|monthly] [N]
    –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: daily, N=3
    """
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã: –¥–æ–ø—É—Å–∫–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ [timeframe] [N] –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ [N]
    timeframe = 'daily'
    top_n = 3
    args = [a.lower() for a in (context.args or [])]

    if args:
        # –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç —á–∏—Å–ª–æ ‚Äî —Ç—Ä–∞–∫—Ç—É–µ–º –∫–∞–∫ N
        if args[0].isdigit():
            top_n = max(1, min(10, int(args[0])))
        else:
            if args[0] in ['daily', 'weekly', 'monthly']:
                timeframe = args[0]
            # –≤—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å —á–∏—Å–ª–æ–º
            if len(args) > 1 and args[1].isdigit():
                top_n = max(1, min(10, int(args[1])))

    loading_msg = await update.message.reply_html(
        f"<b>‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥—Ä–µ—Å–æ–≤ –∏–∑ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞...</b>\nüìÖ –ü–µ—Ä–∏–æ–¥: {timeframe}\nüîü –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {top_n}"
    )

    # –ü—Ä–µ—Ñ–µ—Ä–µ–Ω—Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (desktop –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    chat_id = update.effective_chat.id
    pref = database.get_user_format_preference(chat_id)
    style = 'mobile' if pref == 'mobile' else 'desktop'

    loop = asyncio.get_running_loop()
    data = await loop.run_in_executor(None, hyperliquid_api.get_leaderboard_data_sync)
    addresses = hyperliquid_api.extract_top_addresses(data, timeframe=timeframe, top=top_n)

    if not addresses:
        await context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=loading_msg.message_id,
            text=("<b>‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å–∞</b>\n\n"
                 "–í–æ–∑–º–æ–∂–Ω–æ, API –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ."),
            parse_mode='HTML'
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ –ø—É–ª –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
    tasks = [loop.run_in_executor(None, hyperliquid_api.get_user_positions_with_sdk, addr) for addr in addresses]
    results = await asyncio.gather(*tasks)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –≤—ã–≤–æ–¥ –ø–æ –∫–∞–∂–¥–æ–º—É –∞–¥—Ä–µ—Å—É
    parts: list[str] = []
    header = f"""<b>üß† –ü–æ–∑–∏—Ü–∏–∏ —Ç–æ–ø-{len(addresses)} —Ç—Ä–µ–π–¥–µ—Ä–æ–≤</b>
üìÖ –ü–µ—Ä–∏–æ–¥: {timeframe}
"""
    parts.append(header)

    for addr, user_data in zip(addresses, results):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫/–ø—É—Å—Ç—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        if user_data is None:
            if style == 'mobile':
                parts.append(f"\n<pre><code>{addr}</code></pre>\n‚ùó –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
            else:
                parts.append(f"\n<code>{addr}</code>\n‚ùó –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
            continue

        positions = user_data.get('assetPositions', []) or []
        if not positions:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –∞–¥—Ä–µ—Å–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            role_data = await loop.run_in_executor(None, hyperliquid_api.get_user_role, addr)
            role_info = ""
            if role_data:
                role = role_data.get('role', 'unknown')
                if role == 'user':
                    role_info = " (üë§ –æ–±—ã—á–Ω—ã–π)"
                elif role == 'subAccount':
                    master = role_data.get('master', 'N/A')
                    role_info = f" (üîó —Å—É–±–∞–∫–∫–∞—É–Ω—Ç –º–∞—Å—Ç–µ—Ä–∞ {master[:10]}...)"
                elif role == 'vault':
                    role_info = " (üè¶ vault)"
                elif role == 'agent':
                    role_info = " (ü§ñ –∞–≥–µ–Ω—Ç)"
                else:
                    role_info = f" ({role})"
            else:
                role_info = " (‚ùì –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ)"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–æ—Ç-–±–∞–ª–∞–Ω—Å—ã
            spot_balances = user_data.get('balances', []) or []
            significant_balances = [b for b in spot_balances if float(b.get('total', 0)) > 100]  # > $100
            
            spot_info = ""
            if significant_balances:
                spot_coins = [b.get('coin', 'N/A') for b in significant_balances[:3]]
                spot_info = f"\nüí∞ –°–ø–æ—Ç: {', '.join(spot_coins)}"
                if len(significant_balances) > 3:
                    spot_info += f" +{len(significant_balances)-3}"
            
            if style == 'mobile':
                parts.append(f"\n<pre><code>{addr}</code></pre>{role_info}\nüì≠ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π{spot_info}")
            else:
                parts.append(f"\n<code>{addr}</code>{role_info}\nüì≠ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π{spot_info}")
            continue

        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        lines = []
        total_unrealized = 0.0
        for pos in positions:
            position_info = pos.get('position', {}) or {}
            coin = position_info.get('coin', 'N/A')
            position_value = float(position_info.get('positionValue', 0) or 0)
            unrealized_pnl = float(position_info.get('unrealizedPnl', 0) or 0)
            entry_price = float(position_info.get('entryPx', 0) or 0)

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π USD-–≤—Ö–æ–¥ (–æ–±—ä–µ–º –ø–æ–∑–∏—Ü–∏–∏), –∞ –Ω–µ —Ü–µ–Ω—É –∑–∞ –æ–¥–Ω—É –º–æ–Ω–µ—Ç—É
            size_raw = (
                position_info.get('szi')
                or position_info.get('sz')
                or position_info.get('size')
                or position_info.get('positionSize')
                or position_info.get('rawPosSize')
            )
            try:
                size = float(size_raw) if size_raw is not None else 0.0
            except (TypeError, ValueError):
                size = 0.0
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–∞–∑–º–µ—Ä –∏ —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞ ‚Äî —Å—á–∏—Ç–∞–µ–º –æ–±—ä–µ–º –Ω–∞ –≤—Ö–æ–¥–µ, –∏–Ω–∞—á–µ —Ñ–æ–ª–±—ç–∫ –Ω–∞ —Ç–µ–∫—É—â—É—é –æ—Ü–µ–Ω–∫—É –ø–æ–∑–∏—Ü–∏–∏
            entry_value_usd = abs(size) * entry_price if (size and entry_price) else position_value

            total_unrealized += unrealized_pnl

            # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            direction_text, direction_emoji = hyperliquid_api.determine_position_direction(position_info, default_by_value=position_value)

            # –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–∞
            pnl_percent = (unrealized_pnl / entry_value_usd * 100) if entry_value_usd > 0 else 0
            
            lines.append(
                f"  {direction_emoji} <b>{coin}</b> {direction_text}\n"
                f"  üí∞ –í—Ö–æ–¥: {hyperliquid_api.fmt_usd_compact(entry_value_usd)} | "
                f"PnL: {hyperliquid_api.fmt_usd_compact(unrealized_pnl, show_plus=True)} ({pnl_percent:+.1f}%)"
            )

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Ö–æ–¥–∞ –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞
        total_entry_value = sum(
            abs(float(pos.get('position', {}).get('szi', 0) or 0)) * 
            float(pos.get('position', {}).get('entryPx', 0) or 0)
            for pos in positions if pos.get('position', {})
        )
        
        # –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–∞
        total_pnl_percent = (total_unrealized / total_entry_value * 100) if total_entry_value > 0 else 0
        
        summary_emoji = 'üéâ' if total_unrealized > 0 else ('üò∞' if total_unrealized < 0 else 'üòê')
        addr_repr = f"<pre><code>{addr}</code></pre>" if style == 'mobile' else f"<code>{addr}</code>"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π (–æ–Ω–∏ –±—É–¥—É—Ç –≤ –∫–æ–Ω—Ü–µ)
        parts.append(
            f"\n{addr_repr}\n" + "\n".join(lines) +
            f"\n\nüìà <b>–ò—Ç–æ–≥–æ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º:</b>\n"
            f"üíµ –û–±—â–∏–π –≤—Ö–æ–¥: {hyperliquid_api.fmt_usd_compact(total_entry_value)}\n"
            f"{summary_emoji} –û–±—â–∏–π PnL: {hyperliquid_api.fmt_usd_compact(total_unrealized, show_plus=True)} ({total_pnl_percent:+.1f}%)"
        )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω–µ—Ü
    explanation = "\n\n‚ÑπÔ∏è <i>PnL = —Ç–µ–∫—É—â–∞—è –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫ (–Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è)</i>\n‚ÑπÔ∏è <i>–í—Ö–æ–¥ = —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏</i>"
    
    # Telegram –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ ~4096 —Å–∏–º–≤–æ–ª–æ–≤. –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ —á–∞—Å—Ç—è–º –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    MAX_LEN = 3500  # –£–º–µ–Ω—å—à–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
    header_text = parts[0] if parts else "<b>üß† –ü–æ–∑–∏—Ü–∏–∏ —Ç–æ–ø —Ç—Ä–µ–π–¥–µ—Ä–æ–≤</b>"
    await context.bot.edit_message_text(
        chat_id=update.effective_chat.id,
        message_id=loading_msg.message_id,
        text=header_text,
        parse_mode='HTML'
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –±–ª–æ–∫ –ø–æ –∞–¥—Ä–µ—Å—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    for i, block in enumerate(parts[1:]):
        if not block:
            continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –±–ª–æ–∫–∞
        if len(block) > MAX_LEN:
            # –ï—Å–ª–∏ –±–ª–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –æ–±—Ä–µ–∑–∞–µ–º –µ–≥–æ
            block = block[:MAX_LEN-100] + "\n\n‚ö†Ô∏è <i>–î–∞–Ω–Ω—ã–µ –æ–±—Ä–µ–∑–∞–Ω—ã –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram</i>"
        
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=block,
            parse_mode='HTML'
        )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –≤ –∫–æ–Ω—Ü–µ
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=explanation,
        parse_mode='HTML'
    )

    return


# =============================
# –¢–æ—Ä–≥–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
# =============================
async def set_key(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
    if update.message.chat.type != 'private':
        warning_message = (
            "üîí –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.\n\n"
            "–û—Ç–∫—Ä–æ–π—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:\n"
            "<code>/set_key 0x–í–ê–®_–ü–†–ò–í–ê–¢–ù–´–ô_–ö–õ–Æ–ß</code>\n\n"
            "–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª—é—á–æ–º –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
        )
        await update.message.reply_html(warning_message, disable_web_page_preview=True)
        return

    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    message_id = update.message.message_id

    if not context.args:
        warning_message = (
            "üîí –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.\n\n"
            "–û—Ç–∫—Ä–æ–π—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:\n"
            "<code>/set_key 0x–í–ê–®_–ü–†–ò–í–ê–¢–ù–´–ô_–ö–õ–Æ–ß</code>\n\n"
            "–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª—é—á–æ–º –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
        )
        await update.message.reply_html(warning_message, disable_web_page_preview=True)
        return

    private_key = context.args[0]
    # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª—é—á–æ–º
    try:
        await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
        msg_deleted_text = "\n\n(–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª—é—á–æ–º –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ)"
    except Exception:
        msg_deleted_text = "\n\n(–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –£–¥–∞–ª–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é!)"

    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –∫–ª—é—á–∞
    if not (private_key.startswith("0x") and len(private_key) == 66):
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞. –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞.{msg_deleted_text}")
        return

    # –®–∏—Ñ—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º (dual write: –ø–æ user_id –∏ –ø–æ chat_id –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    try:
        address = _derive_address_from_private_key(private_key)
        # –õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ trading.fernet
        fernet = trading.fernet
        encrypted_key = fernet.encrypt(private_key.encode())
        with sqlite3.connect(DB_FILE, check_same_thread=False) as conn:
            cursor = conn.cursor()
            # –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –ø–æ user_id
            cursor.execute(
                "INSERT OR REPLACE INTO user_trade_keys (user_id, address, encrypted_key) VALUES (?, ?, ?)",
                (user_id, address, encrypted_key),
            )
            # –°—Ç–∞—Ä–∞—è –∑–∞–ø–∏—Å—å –ø–æ chat_id (legacy)
            cursor.execute(
                "INSERT OR REPLACE INTO user_trade_wallets (chat_id, address, encrypted_key) VALUES (?, ?, ?)",
                (chat_id, address, encrypted_key),
            )
            conn.commit()
        await update.message.reply_html(
            f"‚úÖ –í–∞—à —Ç–æ—Ä–≥–æ–≤—ã–π –∫–æ—à–µ–ª–µ–∫ <code>{address}</code> —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.{msg_deleted_text}"
        )
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–ª—é—á–∞: {e}{msg_deleted_text}")


async def _trade_command_handler(update: Update, context: ContextTypes.DEFAULT_TYPE, action: str, is_buy: bool):
    # –ü–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ + –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ (NBSP –∏ —Ç.–ø.)
    try:
        user_id = getattr(update.effective_user, 'id', None)
        chat_id = getattr(update.effective_chat, 'id', None)
        raw_text = (getattr(update.message, 'text', '') or '')
        normalized_text = (raw_text
                           .replace('\u00A0', ' ')
                           .replace('\u202F', ' ')
                           .replace('\u2009', ' ')
                           .replace('\u2007', ' '))
        logger.info(f"/{action}: user_id={user_id} chat_id={chat_id} args={context.args} raw='{raw_text}' normalized='{normalized_text}'")
    except Exception:
        normalized_text = (getattr(update.message, 'text', '') or '')

    # –ì–∏–±–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤: –¥–æ–ø—É—Å–∫–∞–µ–º –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞
    working_args = list(context.args) if context.args else []
    if len(working_args) != 2:
        tokens = (normalized_text or '').strip().split()
        if tokens and tokens[0].startswith('/'):
            # –°—Ä–µ–∑–∞–µ–º —Å–∞–º—É –∫–æ–º–∞–Ω–¥—É (/buy, /sell, –≤–æ–∑–º–æ–∂–Ω–æ c @username)
            tokens = tokens[1:]
        working_args = tokens

    if len(working_args) < 2:
        await update.message.reply_html(
            f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/{action} ü™ô<b>–º–æ–Ω–µ—Ç–∞</b> üí∞<b>—Å—É–º–º–∞</b></code>\n–ü—Ä–∏–º–µ—Ä: <code>/{action} ETH 100</code>"
        )
        return

    coin = (working_args[0] or '').upper()
    try:
        amt_str = str(working_args[1]).replace('$', '').replace(',', '').strip()
        sz_usd = float(amt_str)
        if sz_usd <= 0:
            raise ValueError
    except ValueError:
        await update.message.reply_text("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
        return

    side = "LONG" if is_buy else "SHORT"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ä–∞–Ω–æ
    try:
        loading_msg = await update.message.reply_text(f"‚è≥ –û—Ç–∫—Ä—ã–≤–∞—é {side} –ø–æ {coin} –Ω–∞ ${sz_usd}...")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å loading_msg –¥–ª—è {action}: {e}")
        try:
            await update.message.reply_text("‚è≥ –í—ã–ø–æ–ª–Ω—è—é –æ–ø–µ—Ä–∞—Ü–∏—é...")
        except Exception as e2:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å fallback loading_msg: {e2}")
        # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ loading_msg
        loading_msg = None

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ –ø—É–ª–µ –ø–æ—Ç–æ–∫–æ–≤ —Å –ø–µ—Ä–µ—Ö–≤–∞—Ç–æ–º –æ—à–∏–±–æ–∫
    try:
        loop = asyncio.get_running_loop()
        result = await loop.run_in_executor(
            None,
            trading.execute_trade_action,
            update.effective_user.id,
            update.effective_chat.id,
            "market_open",
            {"coin": coin, "is_buy": is_buy, "sz_usd": sz_usd},
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ run_in_executor –¥–ª—è {action}: {e}", exc_info=True)
        result = {"success": False, "error": str(e)}

    # –í–æ–∑–≤—Ä–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    text = (
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ! {result['data']}" if result.get("success")
        else f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏: {result.get('error', 'Unknown')}"
    )
    try:
        if loading_msg is not None:
            await loading_msg.edit_text(text)
        else:
            await update.message.reply_text(text)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {action}: {e}")


async def sell(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await _trade_command_handler(update, context, action="sell", is_buy=False)


async def close(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_html("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/close ü™ô<b>–º–æ–Ω–µ—Ç–∞</b></code>\n–ü—Ä–∏–º–µ—Ä: <code>/close ETH</code>")
        return

    coin = context.args[0].upper()
    loading_msg = await update.message.reply_text(f"‚è≥ –ó–∞–∫—Ä—ã–≤–∞—é –ø–æ–∑–∏—Ü–∏—é –ø–æ {coin}...")

    loop = asyncio.get_running_loop()
    result = await loop.run_in_executor(
        None,
        trading.execute_trade_action,
        update.effective_user.id,
        update.effective_chat.id,
        "market_close",
        {"coin": coin},
    )

    if result.get("success"):
        await loading_msg.edit_text(f"‚úÖ –£—Å–ø–µ—à–Ω–æ! {result['data']}")
    else:
        await loading_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏: {result.get('error', 'Unknown')}")


async def leverage(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –õ–æ–≥–∏ –≤—ã–∑–æ–≤–∞ + –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–≤
    try:
        user_id = getattr(update.effective_user, 'id', None)
        chat_id = getattr(update.effective_chat, 'id', None)
        raw_text = (getattr(update.message, 'text', '') or '')
        normalized_text = (raw_text
                           .replace('\u00A0', ' ')
                           .replace('\u202F', ' ')
                           .replace('\u2009', ' ')
                           .replace('\u2007', ' '))
        logger.info(f"/leverage: user_id={user_id} chat_id={chat_id} args={context.args} raw='{raw_text}' normalized='{normalized_text}'")
    except Exception:
        normalized_text = (getattr(update.message, 'text', '') or '')

    # –ì–∏–±–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    args = list(context.args) if context.args else []
    if len(args) != 2:
        tokens = (normalized_text or '').strip().split()
        if tokens and tokens[0].startswith('/'):
            tokens = tokens[1:]
        args = tokens

    if len(args) < 2:
        await update.message.reply_html(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/leverage ü™ô<b>–º–æ–Ω–µ—Ç–∞</b> ‚ö°<b>–ø–ª–µ—á–æ</b></code>\n–ü—Ä–∏–º–µ—Ä: <code>/leverage ETH 20</code>"
        )
        return

    coin = (args[0] or '').upper()
    try:
        lev_str = str(args[1]).replace('x', '').replace('X', '').strip()
        leverage_val = int(lev_str)
        if not (1 <= leverage_val <= 50):
            raise ValueError
    except ValueError:
        await update.message.reply_text("‚ùå –ü–ª–µ—á–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10 –∏–ª–∏ 25).")
        return

    try:
        loading_msg = await update.message.reply_text(f"‚è≥ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø–ª–µ—á–æ x{leverage_val} –¥–ª—è {coin}...")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å loading_msg –¥–ª—è leverage: {e}")
        loading_msg = None

    try:
        loop = asyncio.get_running_loop()
        result = await loop.run_in_executor(
            None,
            trading.execute_trade_action,
            update.effective_user.id,
            update.effective_chat.id,
            "update_leverage",
            {"coin": coin, "leverage": leverage_val},
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ run_in_executor –¥–ª—è leverage: {e}", exc_info=True)
        result = {"success": False, "error": str(e)}

    text = (
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ! {result['data']}" if result.get("success")
        else f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–ª–µ—á–∞: {result.get('error', 'Unknown')}"
    )
    try:
        if loading_msg is not None:
            await loading_msg.edit_text(text)
        else:
            await update.message.reply_text(text)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è leverage: {e}")


# –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞: /cancel ‚Äî –æ—Ç–º–µ–Ω–∞ –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ –ø–æ –º–æ–Ω–µ—Ç–µ –∏ ID –æ—Ä–¥–µ—Ä–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    usage = (
        "<b>‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –º–æ–Ω–µ—Ç—É –∏ ID –æ—Ä–¥–µ—Ä–∞</b>\n\n"
        "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /cancel <code>COIN</code> <code>ORDER_ID</code>\n"
        "–ü—Ä–∏–º–µ—Ä: /cancel ETH 123456789"
    )
    if len(context.args) != 2:
        await update.message.reply_html(usage)
        return

    coin = context.args[0].upper()
    oid_str = context.args[1]
    try:
        oid = int(oid_str)
        if oid <= 0:
            raise ValueError
    except Exception:
        await update.message.reply_html(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –æ—Ä–¥–µ—Ä–∞: <code>{oid_str}</code>\n\n" + usage)
        return

    loading_msg = await update.message.reply_text(f"‚è≥ –û—Ç–º–µ–Ω—è—é –æ—Ä–¥–µ—Ä #{oid} –ø–æ {coin}...")
    loop = asyncio.get_running_loop()
    result = await loop.run_in_executor(
        None,
        trading.execute_trade_action,
        update.effective_user.id,
        update.effective_chat.id,
        "cancel_order",
        {"coin": coin, "oid": oid},
    )

    if result.get("success"):
        await loading_msg.edit_text(f"‚úÖ –£—Å–ø–µ—à–Ω–æ! {result['data']}")
    else:
        await loading_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ—Ä–¥–µ—Ä–∞: {result.get('error', 'Unknown')}")

async def set_key_group_warning(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–≤–µ—á–∞–µ—Ç –≤ –≥—Ä—É–ø–ø–∞—Ö –Ω–∞ /set_key –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–µ—Ä–µ–π—Ç–∏ –≤ –õ–°."""
    warning_message = (
        "Ô∏èÔ∏è‚ö†Ô∏è <b>–û–ü–ê–°–ù–û!</b>\n\n"
        "–ö–æ–º–∞–Ω–¥–∞ <code>/set_key</code> —Ä–∞–±–æ—Ç–∞–µ—Ç <b>—Ç–æ–ª—å–∫–æ</b> –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.\n\n"
        "–û—Ç–∫—Ä–æ–π—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º\n\n"
        "–ü—Ä–∏—á–∏–Ω–∞: –≤ –≥—Ä—É–ø–ø–∞—Ö —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç —É—Å–ø–µ—Ç—å —É–≤–∏–¥–µ—Ç—å –∫—Ç–æ-—Ç–æ –µ—â—ë –∏–ª–∏ —É–π—Ç–∏ –≤ –ø—É—à-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."
    )
    try:
        await update.message.reply_html(warning_message, disable_web_page_preview=True)
    except Exception as e:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ: {e}")
    # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –º–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∏—Å–∫ —É—Ç–µ—á–∫–∏
    try:
        await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=update.message.message_id)
    except Exception as e:
        logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ: {e}")


async def buy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await _trade_command_handler(update, context, action="buy", is_buy=True)


async def trade(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–ª–∏–∞—Å /order: —Å–æ–∑–¥–∞–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –∏ –ª–∏–º–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (cancel, close, leverage)."""
    # –î–µ–ª–µ–≥–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ /order
    await order(update, context)


async def order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –∏ –ª–∏–º–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤.

    –ü—Ä–∏–º–µ—Ä—ã:
    /order market buy BTC 1000 ‚Äî –∫—É–ø–∏—Ç—å –Ω–∞ $1000
    /order market sell ETH 250 ‚Äî –ø—Ä–æ–¥–∞—Ç—å –Ω–∞ $250
    /order limit buy BTC 0.5 @ 25000 ‚Äî –ª–∏–º–∏—Ç–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ 0.5 BTC –ø–æ $25000
    /order limit sell ETH 1 @ 3500 ioc ‚Äî –ª–∏–º–∏—Ç–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞ 1 ETH –ø–æ $3500 (IOC)
    /order limit buy SOL 10 @ 140 alo reduce ‚Äî —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –∫–∞–∫ –º–µ–π–∫–µ—Ä + reduce-only
    """
    args = context.args or []

    usage = (
        "<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
        "‚Ä¢ /order market buy|sell COIN USD\n"
        "‚Ä¢ /order limit buy|sell COIN SIZE @ PRICE [gtc|ioc|alo] [reduce]\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ /order market buy BTC 1000\n"
        "‚Ä¢ /order limit sell ETH 1 @ 3500 ioc\n"
        "‚Ä¢ /order limit buy SOL 10 @ 140 alo reduce"
    )

    if not args:
        await update.message.reply_html(usage)
        return

    mode = args[0].lower()

    # –†—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä –≤ USD
    if mode == 'market':
        if len(args) < 4:
            await update.message.reply_html(usage)
            return
        side = args[1].lower()
        if side in ('buy', 'long', '–ø–æ–∫—É–ø–∫–∞', '–∫—É–ø–∏—Ç—å'):
            is_buy = True
        elif side in ('sell', 'short', '–ø—Ä–æ–¥–∞–∂–∞', '–ø—Ä–æ–¥–∞—Ç—å'):
            is_buy = False
        else:
            await update.message.reply_html("–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ—Ä–æ–Ω—É: buy –∏–ª–∏ sell\n\n" + usage)
            return
        coin = args[2].upper()
        try:
            sz_usd = float(args[3].replace(',', '.'))
            if sz_usd <= 0:
                raise ValueError
        except Exception:
            await update.message.reply_html("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –≤ USD. –ü—Ä–∏–º–µ—Ä: /order market buy BTC 1000")
            return

        loading_msg = await update.message.reply_html("<b>‚è≥ –†–∞–∑–º–µ—â–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞...</b>")
        loop = asyncio.get_running_loop()
        result = await loop.run_in_executor(
            None,
            trading.execute_trade_action,
            update.effective_user.id,
            update.effective_chat.id,
            'market_open',
            {"coin": coin, "is_buy": is_buy, "sz_usd": sz_usd}
        )

        text = result.get('data') if result.get('success') else f"‚ùå –û—à–∏–±–∫–∞: {result.get('error', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
        await context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=loading_msg.message_id,
            text=text,
            parse_mode='HTML'
        )
        return

    # –õ–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –≤ —Ä–∞–∑–º–µ—Ä–µ –º–æ–Ω–µ—Ç
    if mode == 'limit':
        if len(args) < 5:
            await update.message.reply_html(usage)
            return
        side = args[1].lower()
        if side in ('buy', 'long', '–ø–æ–∫—É–ø–∫–∞', '–∫—É–ø–∏—Ç—å'):
            is_buy = True
        elif side in ('sell', 'short', '–ø—Ä–æ–¥–∞–∂–∞', '–ø—Ä–æ–¥–∞—Ç—å'):
            is_buy = False
        else:
            await update.message.reply_html("–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ—Ä–æ–Ω—É: buy –∏–ª–∏ sell\n\n" + usage)
            return

        coin = args[2].upper()

        # –†–∞–∑–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞ –∏ —Ü–µ–Ω—ã: —Ç—Ä–µ–±—É–µ–º —è–≤–Ω–æ–µ –Ω–∞–ª–∏—á–∏–µ —Å–∏–º–≤–æ–ª–∞ '@'
        size_token = args[3]
        price_token = None
        remaining_tokens_start = 4
        saw_at_explicit = False
        if '@' in size_token:
            saw_at_explicit = True
            parts = size_token.split('@', 1)
            size_token = parts[0]
            price_token = parts[1]
        else:
            if len(args) > 4 and args[4] == '@':
                saw_at_explicit = True
                price_token = args[5] if len(args) > 5 else None
                remaining_tokens_start = 6
            elif len(args) > 4 and args[4].startswith('@'):
                saw_at_explicit = True
                price_token = args[4][1:]
                remaining_tokens_start = 5

        if not saw_at_explicit:
            await update.message.reply_html("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–∏–º–≤–æ–ª '@' –º–µ–∂–¥—É —Ä–∞–∑–º–µ—Ä–æ–º –∏ —Ü–µ–Ω–æ–π.\n–ü—Ä–∏–º–µ—Ä: /order limit buy BTC 0.5 @ 25000")
            return
        if price_token is None or price_token == "":
            await update.message.reply_html("–ù–µ —É–∫–∞–∑–∞–Ω–∞ —Ü–µ–Ω–∞ –ø–æ—Å–ª–µ '@'.\n–ü—Ä–∏–º–µ—Ä: /order limit buy BTC 0.5 @ 25000")
            return

        try:
            sz = float(size_token.replace(',', '.'))
            limit_px = float(price_token.replace(',', '.'))
            if sz <= 0 or limit_px <= 0:
                raise ValueError
        except Exception:
            await update.message.reply_html("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä/—Ü–µ–Ω–∞. –ü—Ä–∏–º–µ—Ä: /order limit buy BTC 0.5 @ 25000")
            return

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: tif –∏ reduce_only
        tif = 'Gtc'
        reduce_only = False
        unknown_flags = []
        for tok in args[remaining_tokens_start:]:
            low = tok.lower()
            if low in ('gtc', 'ioc', 'alo'):
                tif = low.capitalize()
            elif low in ('reduce', 'reduce_only', 'ro', '-r', '--reduce'):
                reduce_only = True
            else:
                unknown_flags.append(tok)
        if unknown_flags:
            await update.message.reply_html(
                "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: " + ", ".join(unknown_flags) + "\n" 
                "–î–æ–ø—É—Å—Ç–∏–º—ã–µ: gtc, ioc, alo, reduce"
            )
            return

        loading_msg = await update.message.reply_html("<b>‚è≥ –†–∞–∑–º–µ—â–µ–Ω–∏–µ –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞...</b>")
        loop = asyncio.get_running_loop()
        result = await loop.run_in_executor(
            None,
            trading.execute_trade_action,
            update.effective_user.id,
            update.effective_chat.id,
            'limit_order',
            {"coin": coin, "is_buy": is_buy, "sz": sz, "limit_px": limit_px, "reduce_only": reduce_only, "tif": tif}
        )

        text = result.get('data') if result.get('success') else f"‚ùå –û—à–∏–±–∫–∞: {result.get('error', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
        await context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=loading_msg.message_id,
            text=text,
            parse_mode='HTML'
        )
        return

    # –ï—Å–ª–∏ —Ä–µ–∂–∏–º –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω
    await update.message.reply_html("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º. –£–∫–∞–∂–∏—Ç–µ market –∏–ª–∏ limit.\n\n" + usage)

async def wallet_activity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–æ—à–µ–ª—å–∫–∞"""
    if not context.args:
        await update.message.reply_text(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞!\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /wallet_activity –∞–¥—Ä–µ—Å"
        )
        return
    
    wallet_address = context.args[0]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ –∫–æ—à–µ–ª–µ–∫
    user_id = update.effective_chat.id
    wallets = database.get_wallets_for_user(user_id)
    
    if wallet_address not in wallets:
        await update.message.reply_html(
            "‚ùå –ö–æ—à–µ–ª–µ–∫ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è!\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π: /add –∞–¥—Ä–µ—Å"
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    loading_message = await update.message.reply_html(
        f"‚è≥ <b>–ó–∞–≥—Ä—É–∂–∞—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–æ—à–µ–ª—å–∫–∞...</b>\n"
        f"üîó <code>{wallet_address}</code>"
    )
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫
        from hyperliquid_api import get_user_fills, format_user_fills_message
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        
        fills = get_user_fills(wallet_address, limit=50)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç
        
        if fills:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 0
            page = int(context.user_data.get(f'page_{wallet_address}', 0))
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Å–¥–µ–ª–æ–∫
            activity_message, has_prev, has_next = format_user_fills_message(fills, wallet_address, page)
            
            # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            keyboard = []
            nav_buttons = []
            
            if has_prev:
                nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"wallet_prev_{wallet_address}_{page-1}"))
            
            if has_next:
                nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"wallet_next_{wallet_address}_{page+1}"))
            
            if nav_buttons:
                keyboard.append(nav_buttons)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            keyboard.append([InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"wallet_refresh_{wallet_address}_{page}")])
            
            reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            await loading_message.edit_text(
                activity_message,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
        else:
            await loading_message.edit_text(
                f"üìä <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–æ—à–µ–ª—å–∫–∞</b>\n"
                f"üîó <code>{wallet_address}</code>\n\n"
                f"üì≠ –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫ –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n\n"
                f"üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                f"‚Ä¢ –ö–æ—à–µ–ª–µ–∫ –Ω–µ —Å–æ–≤–µ—Ä—à–∞–ª —Å–¥–µ–ª–∫–∏\n"
                f"‚Ä¢ –ê–¥—Ä–µ—Å —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ\n"
                f"‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å API",
                parse_mode='HTML'
            )
            
    except Exception as e:
        logger.error(f"Error getting wallet activity for {wallet_address}: {e}")
        await loading_message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</b>\n"
            f"üîó <code>{wallet_address}</code>\n\n"
            f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥—Ä–µ—Å",
            parse_mode='HTML'
        )

async def wallet_navigation_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫ –∫–æ—à–µ–ª—å–∫–∞"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    if data.startswith('wallet_'):
        parts = data.split('_')
        if len(parts) == 2:  # wallet_address - –≤–æ–∑–≤—Ä–∞—Ç –∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            wallet_address = parts[1]
            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ—à–µ–ª—å–∫–∞
            await positions_command_with_address(update, context, wallet_address)
            return
        elif len(parts) == 4:  # wallet_action_address_page - –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∏—Å—Ç–æ—Ä–∏–∏
            action = parts[1]  # prev, next, refresh
            wallet_address = parts[2]
            page = int(parts[3])
        else:
            return  # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data[f'page_{wallet_address}'] = page
        
        try:
            from hyperliquid_api import get_user_fills, format_user_fills_message
            from telegram import InlineKeyboardButton, InlineKeyboardMarkup
            
            fills = get_user_fills(wallet_address, limit=50)
            
            if fills:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Å–¥–µ–ª–æ–∫
                activity_message, has_prev, has_next = format_user_fills_message(fills, wallet_address, page)
                
                # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                keyboard = []
                nav_buttons = []
                
                if has_prev:
                    nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"wallet_prev_{wallet_address}_{page-1}"))
                
                if has_next:
                    nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"wallet_next_{wallet_address}_{page+1}"))
                
                if nav_buttons:
                    keyboard.append(nav_buttons)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                keyboard.append([InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"wallet_refresh_{wallet_address}_{page}")])
                
                reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–∫–∏ "Message is not modified"
                try:
                    await query.edit_message_text(
                        activity_message,
                        reply_markup=reply_markup,
                        parse_mode='HTML'
                    )
                except Exception as e:
                    if "Message is not modified" in str(e):
                        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                        logger.debug("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
                    else:
                        # –ï—Å–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞, –ª–æ–≥–∏—Ä—É–µ–º –µ—ë
                        logger.error(f"Error updating message: {e}")
            else:
                await query.edit_message_text(
                    f"üìä <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–æ—à–µ–ª—å–∫–∞</b>\n"
                    f"üîó <code>{wallet_address}</code>\n\n"
                    f"üì≠ –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫ –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
                    parse_mode='HTML'
                )
                
        except Exception as e:
            logger.error(f"Error in wallet navigation callback: {e}")
            await query.edit_message_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö</b>\n"
                f"üîó <code>{wallet_address}</code>\n\n"
                f"‚ö†Ô∏è –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
                parse_mode='HTML'
            )

async def leaderboard_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–õ–∏–¥–µ—Ä–±–æ—Ä–¥ –∑–∞ –¥–µ–Ω—å"""
    await update.message.reply_text(
        "üèÜ <b>–¢–æ–ø —Ç—Ä–µ–π–¥–µ—Ä–æ–≤ –∑–∞ –¥–µ–Ω—å</b>\n\n"
        "üöß <i>–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</i>\n\n"
        "üìä –ë—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å:\n"
        "‚Ä¢ –¢–æ–ø-10 —Ç—Ä–µ–π–¥–µ—Ä–æ–≤ –ø–æ PnL\n"
        "‚Ä¢ –û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤\n"
        "‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫\n"
        "‚Ä¢ ROI –∑–∞ –ø–µ—Ä–∏–æ–¥\n\n"
        "‚è≥ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!",
        parse_mode='HTML'
    )

async def leaderboard_week(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–õ–∏–¥–µ—Ä–±–æ—Ä–¥ –∑–∞ –Ω–µ–¥–µ–ª—é"""
    await update.message.reply_text(
        "üèÜ <b>–¢–æ–ø —Ç—Ä–µ–π–¥–µ—Ä–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é</b>\n\n"
        "üöß <i>–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</i>\n\n"
        "üìä –ë—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å:\n"
        "‚Ä¢ –¢–æ–ø-10 —Ç—Ä–µ–π–¥–µ—Ä–æ–≤ –ø–æ PnL\n"
        "‚Ä¢ –û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤\n"
        "‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫\n"
        "‚Ä¢ ROI –∑–∞ –ø–µ—Ä–∏–æ–¥\n\n"
        "‚è≥ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!",
        parse_mode='HTML'
    )

async def leaderboard_month(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–õ–∏–¥–µ—Ä–±–æ—Ä–¥ –∑–∞ –º–µ—Å—è—Ü"""
    await update.message.reply_text(
        "üèÜ <b>–¢–æ–ø —Ç—Ä–µ–π–¥–µ—Ä–æ–≤ –∑–∞ –º–µ—Å—è—Ü</b>\n\n"
        "üöß <i>–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</i>\n\n"
        "üìä –ë—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å:\n"
        "‚Ä¢ –¢–æ–ø-10 —Ç—Ä–µ–π–¥–µ—Ä–æ–≤ –ø–æ PnL\n"
        "‚Ä¢ –û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤\n"
        "‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫\n"
        "‚Ä¢ ROI –∑–∞ –ø–µ—Ä–∏–æ–¥\n\n"
        "‚è≥ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!",
        parse_mode='HTML'
    )


async def orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞ –ø–æ –∞–¥—Ä–µ—Å—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    address = clean_address(context.args)
    if not address:
        await update.message.reply_html(
            "<b>‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /orders –∞–¥—Ä–µ—Å"
        )
        return

    loading_msg = await update.message.reply_html(
        "<b>‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞...</b>"
    )

    loop = asyncio.get_running_loop()
    open_orders = await loop.run_in_executor(None, hyperliquid_api.get_open_orders, address)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    header = f"üíº –ê–¥—Ä–µ—Å: <code>{address}</code>\n"
    orders_text = hyperliquid_api.format_open_orders(open_orders, page=1)
    if not orders_text:
        try:
            count = len(open_orders) if isinstance(open_orders, list) else 0
        except Exception:
            count = 0
        orders_text = f"\n<b>üìë –û—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞ (–≤—Å–µ–≥–æ {count}):</b>\n‚Äî"

    message = header + orders_text

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è: –ø–æ 5 –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    try:
        total = len(open_orders) if isinstance(open_orders, list) else 0
    except Exception:
        total = 0
    orders_per_page = 5
    total_pages = (total + orders_per_page - 1) // orders_per_page if total > 0 else 1

    keyboard = []
    if total_pages > 1:
        keyboard.append([
            InlineKeyboardButton("1/" + str(total_pages), callback_data=f"orders_page_1_{address}"),
            InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"orders_page_2_{address}")
        ])

    reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None

    await context.bot.edit_message_text(
        chat_id=update.effective_chat.id,
        message_id=loading_msg.message_id,
        text=message,
        parse_mode='HTML',
        reply_markup=reply_markup
    )


async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞"""
    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—Ö–æ–¥–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–±–µ–ª–æ–≤
    try:
        raw_text = (getattr(update.message, 'text', '') or '')
        normalized_text = (raw_text
                           .replace('\u00A0', ' ')
                           .replace('\u202F', ' ')
                           .replace('\u2009', ' ')
                           .replace('\u2007', ' '))
        logger.info(f"/balance raw='{raw_text}' normalized='{normalized_text}' args={context.args}")
    except Exception as e:
        logger.debug(f"/balance logging normalization failed: {e}")

    address = clean_address(context.args)
    if not address:
        await update.message.reply_html(
            "<b>‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å</b>\n\n"
            "üîç –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /balance <code>–∞–¥—Ä–µ—Å</code>"
        )
        return

    loading_msg = await update.message.reply_html(
        "<b>‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–ª–∞–Ω—Å–∞...</b>"
    )

    # –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    chat_id = update.effective_chat.id
    pref = database.get_user_format_preference(chat_id)
    style = 'mobile' if pref == 'mobile' else 'desktop'

    loop = asyncio.get_running_loop()
    data = await loop.run_in_executor(None, hyperliquid_api.get_user_positions_with_sdk, address)
    if isinstance(data, dict):
        try:
            logger.info(f"/balance fetched data keys: {list(data.keys())}")
        except Exception as e:
            logger.debug(f"/balance logging normalization failed (keys): {e}")
    else:
        logger.info(f"/balance fetched data type: {type(data)}")

    message = hyperliquid_api.format_balance_message(address, data, style=style)

    # –ï—Å–ª–∏ –¥–µ—Ä–∏–≤–∞—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–µ ‚Äî –¥–æ–±–∞–≤–∏–º –ø–æ–ª–µ–∑–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ (—Ä–æ–ª—å –∏ –¥—Ä.)
    try:
        positions_empty = not (isinstance(data, dict) and data.get('assetPositions'))
    except Exception:
        positions_empty = True

    if not data or positions_empty:
        extras: list[str] = []

        # –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–∞—Å—Ç–µ—Ä/—Å—É–±–∞–∫–∫–∞—É–Ω—Ç/–≤–∞–ª—å—Ç/–∞–≥–µ–Ω—Ç)
        try:
            role_data = await loop.run_in_executor(None, hyperliquid_api.get_user_role, address)
            if isinstance(role_data, dict):
                role = role_data.get('role') or role_data.get('type') or 'unknown'
                role_human = ''
                if role == 'user':
                    role_human = 'üë§ –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
                elif role == 'subAccount':
                    master = role_data.get('master', '')
                    master_short = (master[:10] + '...') if master else 'N/A'
                    role_human = f"üîó –°—É–±–∞–∫–∫–∞—É–Ω—Ç –º–∞—Å—Ç–µ—Ä–∞ {master_short}"
                elif role == 'vault':
                    role_human = 'üè¶ Vault –∞–∫–∫–∞—É–Ω—Ç'
                elif role == 'agent':
                    role_human = 'ü§ñ –ê–≥–µ–Ω—Ç'
                else:
                    role_human = f"‚ùì {role}"
                extras.append(f"üë§ –†–æ–ª—å –∞–¥—Ä–µ—Å–∞: {role_human}")
        except Exception as e:
            logger.warning(f"/balance get_user_role failed for {address}: {e}")

        # –î–æ–±–∞–≤–∏–º —Å–ø–æ—Ç-–±–∞–ª–∞–Ω—Å
        spot_info = ""
        try:
            spot_balances = await loop.run_in_executor(None, hyperliquid_api.get_spot_balances, address)
            if spot_balances:
                spot_info = f"\n\nüí∞ –°–ø–æ—Ç –∞–∫—Ç–∏–≤—ã: {hyperliquid_api.format_spot_balances(spot_balances)}"
        except Exception as e:
            logger.warning(f"/balance spot balances fetch failed for {address}: {e}")

        if extras:
            message = f"{message}\n\n" + "\n".join(extras)
        if spot_info:
            message += spot_info

    await context.bot.edit_message_text(
        chat_id=update.effective_chat.id,
        message_id=loading_msg.message_id,
        text=message,
        parse_mode='HTML'
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —á–∞—Å—Ç—è–º —Å–æ–æ–±—â–µ–Ω–∏—è
async def handle_navigation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    query = update.callback_query
    await query.answer()
    
    if 'message_parts' not in context.user_data:
        await query.edit_message_text("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    parts = context.user_data['message_parts']
    current = context.user_data.get('current_part', 0)
    
    if query.data == "nav_prev":
        current = max(0, current - 1)
    elif query.data == "nav_next":
        current = min(len(parts) - 1, current + 1)
    elif query.data == "nav_info":
        return  # –ü—Ä–æ—Å—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞
    
    context.user_data['current_part'] = current
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = []
    if len(parts) > 1:
        keyboard.append([
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="nav_prev"),
            InlineKeyboardButton(f"{current + 1}/{len(parts)}", callback_data="nav_info"),
            InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data="nav_next")
        ])
    
    reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
    
    await query.edit_message_text(
        text=parts[current],
        parse_mode='HTML',
        reply_markup=reply_markup
    )


async def handle_orders_navigation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –æ—Ä–¥–µ—Ä–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    # –ü–∞—Ä—Å–∏–º callback_data: orders_page_{page}_{address}
    callback_parts = query.data.split('_')
    if len(callback_parts) < 4:
        return
    
    page = int(callback_parts[2])
    address = '_'.join(callback_parts[3:])  # –ê–¥—Ä–µ—Å –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–π –∏ –æ—Ä–¥–µ—Ä–æ–≤
    loop = asyncio.get_running_loop()
    data = await loop.run_in_executor(None, hyperliquid_api.get_user_positions_with_sdk, address)
    open_orders = await loop.run_in_executor(None, hyperliquid_api.get_open_orders, address)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Å –æ—Ä–¥–µ—Ä–∞–º–∏ (–±–µ–∑ –ø–æ–∑–∏—Ü–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö –æ—Ä–¥–µ—Ä–æ–≤)
    message = f"üíº –ê–¥—Ä–µ—Å: <code>{address}</code>"
    orders_text = hyperliquid_api.format_open_orders(open_orders, page=page)
    if not orders_text:
        try:
            count = len(open_orders) if isinstance(open_orders, list) else 0
        except Exception:
            count = 0
        orders_text = f"\n<b>üìë –û—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}, –≤—Å–µ–≥–æ {count}):</b>\n‚Äî"
    message += "\n" + orders_text
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å –∞–¥—Ä–µ—Å–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    positions_empty = not (data and (data.get('assetPositions') or []))
    orders_empty = (not open_orders or len(open_orders) == 0)
    if positions_empty or orders_empty:
        role_data = await loop.run_in_executor(None, hyperliquid_api.get_user_role, address)
        role_info = ""
        if role_data:
            role = role_data.get('role', 'unknown')
            if role == 'user':
                role_info = "üë§ –æ–±—ã—á–Ω—ã–π"
            elif role == 'subAccount':
                master = role_data.get('master', 'N/A')
                role_info = f"üîó —Å—É–±–∞–∫–∫–∞—É–Ω—Ç –º–∞—Å—Ç–µ—Ä–∞ {master[:10]}..."
            elif role == 'vault':
                role_info = "üè¶ vault"
            else:
                role_info = f"‚ùì {role}"
        
        spot_info = ""
        try:
            spot_balances = await loop.run_in_executor(None, hyperliquid_api.get_spot_balances, address)
            if spot_balances:
                spot_info = f"\n\nüí∞ –°–ø–æ—Ç –∞–∫—Ç–∏–≤—ã: {hyperliquid_api.format_spot_balances(spot_balances)}"
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–æ—Ç –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è {address}: {e}")
        
        message += (
            f"\n\nüë§ –†–æ–ª—å –∞–¥—Ä–µ—Å–∞: {role_info}"
            f"{spot_info}\n"
            f"üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ª–∏–º–∏—Ç–Ω—ã–µ –∑–∞—è–≤–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤. "
            f"–ï—Å–ª–∏ –º–∞—Ä–∫–µ—Ç-–æ—Ä–¥–µ—Ä –±—ã–ª –∏—Å–ø–æ–ª–Ω–µ–Ω –∏ –ø–æ–∑–∏—Ü–∏—è —Å—Ä–∞–∑—É –∑–∞–∫—Ä—ã–ª–∞—Å—å, –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å."
        )
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = []
    if open_orders and len(open_orders) > 0:
        total_pages = (len(open_orders) + 4) // 5
        nav_buttons = []
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–±–µ–∑ –æ—Ä–¥–µ—Ä–æ–≤)
        if page == 2:
            nav_buttons.append(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"wallet_{address}"))
        elif page > 2:
            nav_buttons.append(InlineKeyboardButton(f"‚óÄÔ∏è –°—Ç—Ä {page-1}", callback_data=f"orders_page_{page-1}_{address}"))
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        nav_buttons.append(InlineKeyboardButton(f"–°—Ç—Ä {page}/{total_pages}", callback_data="orders_info"))
        
        # –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥" –µ—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if page < total_pages:
            nav_buttons.append(InlineKeyboardButton(f"–°—Ç—Ä {page+1} ‚ñ∂Ô∏è", callback_data=f"orders_page_{page+1}_{address}"))
        
        keyboard.append(nav_buttons)
    
    reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
    
    await query.edit_message_text(
        text=message,
        parse_mode='HTML',
        reply_markup=reply_markup
    )


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—ã–≤–æ–¥–∞
async def format_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """/format desktop|mobile ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞."""
    if not context.args or context.args[0].lower() not in ('desktop', 'mobile'):
        await update.message.reply_html(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/format desktop</code> –∏–ª–∏ <code>/format mobile</code>\n\n"
            "desktop ‚Äî –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–π –≤–∏–¥ (–≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É),\nmobile ‚Äî —É–¥–æ–±–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ (<pre><code>–±–ª–æ–∫</code></pre>)."
        )
        return
    pref = context.args[0].lower()
    database.set_user_format_preference(update.effective_chat.id, pref)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Ä–º–∏–Ω–∞—Ö –∏ —Ä–∞–∑–ª–∏—á–∏—è—Ö."""
    help_message = """<b>üìö –°–ü–†–ê–í–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø</b>

<b>üîç –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–ª–∏—á–∏—è:</b>

<b>üî¥ –û—Ç–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏ (–ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫)</b>
‚Ä¢ –≠—Ç–æ <b>–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ</b> —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏/–ø—Ä–æ–¥–∞–∂–∏
‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤—Å–µ—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
‚Ä¢ –í–∫–ª—é—á–∞–µ—Ç: –≤—Ä–µ–º—è —Å–¥–µ–ª–∫–∏, —Ä–∞–∑–º–µ—Ä, —Ü–µ–Ω—É, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (BUY/SELL)
‚Ä¢ –≠—Ç–æ —É–∂–µ <b>–ø—Ä–æ–∏–∑–æ—à–µ–¥—à–∏–µ</b> —Å–æ–±—ã—Ç–∏—è –≤ –ø—Ä–æ—à–ª–æ–º

<b>üìä –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏</b>
‚Ä¢ –≠—Ç–æ <b>—Ç–µ–∫—É—â–∏–µ</b> –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ —Ä—ã–Ω–∫–µ
‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å
‚Ä¢ –í–∫–ª—é—á–∞–µ—Ç: —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (LONG/SHORT), –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫, —Ü–µ–Ω—É –≤—Ö–æ–¥–∞, –ø–ª–µ—á–æ
‚Ä¢ –≠—Ç–æ –≤–∞—à–∏ <b>–¥–µ–π—Å—Ç–≤—É—é—â–∏–µ</b> –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏

<b>üìë –û—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞</b>
‚Ä¢ –≠—Ç–æ <b>–æ–∂–∏–¥–∞—é—â–∏–µ</b> –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ä–¥–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏—Å—å
‚Ä¢ –í–∫–ª—é—á–∞–µ—Ç: —Ç–∏–ø –æ—Ä–¥–µ—Ä–∞ (Buy/Sell), —Ä–∞–∑–º–µ—Ä, –ª–∏–º–∏—Ç–Ω—É—é —Ü–µ–Ω—É, —Å—Ç–∞—Ç—É—Å
‚Ä¢ –≠—Ç–æ –≤–∞—à–∏ <b>–±—É–¥—É—â–∏–µ</b> —Å–¥–µ–ª–∫–∏, –æ–∂–∏–¥–∞—é—â–∏–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è

<b>üéØ –ü—Ä–æ—Å—Ç–∞—è –∞–Ω–∞–ª–æ–≥–∏—è:</b>
‚Ä¢ <i>–°–¥–µ–ª–∫–∏</i> = —á—Ç–æ –≤—ã —É–∂–µ –∫—É–ø–∏–ª–∏/–ø—Ä–æ–¥–∞–ª–∏ (–∏—Å—Ç–æ—Ä–∏—è)
‚Ä¢ <i>–ü–æ–∑–∏—Ü–∏–∏</i> = —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Å–µ–π—á–∞—Å (–Ω–∞—Å—Ç–æ—è—â–µ–µ)
‚Ä¢ <i>–û—Ä–¥–µ—Ä–∞</i> = —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å/–ø—Ä–æ–¥–∞—Ç—å (–±—É–¥—É—â–µ–µ)

<b>üîß –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/positions –∞–¥—Ä–µ—Å ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏
/wallet_activity –∞–¥—Ä–µ—Å ‚Äî –∏—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫
/orders –∞–¥—Ä–µ—Å ‚Äî –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞
/order market|limit ‚Äî –≤—ã—Å—Ç–∞–≤–∏—Ç—å –æ—Ä–¥–µ—Ä (–Ω–∞–ø—Ä.: /order market buy BTC 1000; /order limit sell ETH 1 @ 3500)
/balance –∞–¥—Ä–µ—Å ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞ –∏ —ç–∫–≤–∏—Ç–∏
/format desktop|mobile ‚Äî –≤—ã–±—Ä–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ –¥–ª—è —á–∞—Ç–∞
/buy|/sell COIN USD ‚Äî —Ä—ã–Ω–æ—á–Ω–∞—è –ø–æ–∫—É–ø–∫–∞/–ø—Ä–æ–¥–∞–∂–∞ –Ω–∞ —Å—É–º–º—É –≤ USD
/close COIN ‚Äî –∑–∞–∫—Ä—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç—É—é –ø–æ–∑–∏—Ü–∏—é –ø–æ —Ä—ã–Ω–∫—É
/leverage COIN X ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–µ—á–æ –¥–ª—è COIN
/cancel COIN ORDER_ID ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –ø–æ id
/set_key –ø—Ä–∏–≤–∞—Ç–Ω—ã–π_–∫–ª—é—á ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–π –∫–ª—é—á (–æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¢–û–õ–¨–ö–û –≤ –õ–° —Å –±–æ—Ç–æ–º)
"""
    
    await update.message.reply_html(help_message)