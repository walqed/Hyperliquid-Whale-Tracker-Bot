# monitoring.py
import logging
import time
import asyncio
import threading
import signal
import sys
from collections import deque
from typing import Dict, Any, Set, Optional, Union
from hyperliquid.websocket_manager import WebsocketManager
from math import floor
import database
import random
from hyperliquid_api import convert_token_number_to_name

logger = logging.getLogger(__name__)

class SimpleRateLimiter:
    """–ü—Ä–æ—Å—Ç–æ–π rate limiter –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤"""
    def __init__(self, max_requests_per_minute=60):
        self.max_requests_per_minute = max_requests_per_minute
        self.current_minute = self._get_current_minute()
        self.current_requests = 0
    
    def _get_current_minute(self) -> int:
        return floor(time.time() / 60) * 60
    
    def _reset_if_new_minute(self) -> None:
        current = self._get_current_minute()
        if current > self.current_minute:
            self.current_minute = current
            self.current_requests = 0
    
    def can_make_request(self) -> bool:
        self._reset_if_new_minute()
        return self.current_requests < self.max_requests_per_minute
    
    def add_request(self) -> None:
        self._reset_if_new_minute()
        self.current_requests += 1

# –û—á–µ—Ä–µ–¥—å –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ–±–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã–º–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø–æ—Ç–æ–∫–æ–º
notification_queue = None  # –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
subscribed_wallets = set()
connection_status = {"connected": False, "last_heartbeat": 0}
rate_limiter = SimpleRateLimiter(max_requests_per_minute=50)

def init_notification_queue():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—á–µ—Ä–µ–¥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –Ω–æ–≤—ã–º event loop"""
    global notification_queue
    try:
        notification_queue = asyncio.Queue()
        logger.info("‚úÖ –û—á–µ—Ä–µ–¥—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—á–µ—Ä–µ–¥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
ws_manager = None
monitor_thread = None
shutdown_event = threading.Event()

def handle_shutdown(signum=None, frame=None):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    if shutdown_event.is_set():
        sys.exit(0)
    
    logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è graceful shutdown...")
    shutdown_event.set()
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    global ws_manager
    if ws_manager:
        try:
            ws_manager.close()
            logger.info("‚úÖ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ WebSocket: {e}")
    
    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    global monitor_thread
    if monitor_thread and monitor_thread.is_alive():
        monitor_thread.join(timeout=5)
        logger.info("‚úÖ –ü–æ—Ç–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    logger.info("üèÅ Graceful shutdown –∑–∞–≤–µ—Ä—à–µ–Ω")
    sys.exit(0)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
signal.signal(signal.SIGINT, handle_shutdown)
signal.signal(signal.SIGTERM, handle_shutdown)

# –¢–∞–π–º–∏–Ω–≥–∏ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
HEARTBEAT_WARN_SEC = 120         # –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å –µ—Å–ª–∏ –¥–æ–ª–≥–æ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π
HEARTBEAT_RECONNECT_SEC = 180    # –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å WS, –µ—Å–ª–∏ —Ç–∏—à–∏–Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ
SUBSCRIBE_PAUSE_SEC = 0.1        # –ø–∞—É–∑–∞ –º–µ–∂–¥—É (un)subscribe, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
CHECK_INTERVAL_SEC = 10          # –ø–µ—Ä–∏–æ–¥ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ (—É–º–µ–Ω—å—à–µ–Ω –¥–ª—è –ª—É—á—à–µ–π –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏)
# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã backoff –¥–ª—è —Ä–µ–∫–æ–Ω–Ω–µ–∫—Ç–∞
RECONNECT_BASE_DELAY_SEC = 1     # —É–º–µ–Ω—å—à–µ–Ω –±–∞–∑–æ–≤—ã–π delay
RECONNECT_MAX_DELAY_SEC = 30     # —É–º–µ–Ω—å—à–µ–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π delay
MAX_RECONNECT_ATTEMPTS = 10      # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è


def on_user_event(event: Dict[str, Any]):
    """Callback-—Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –æ—Ç WebSocket."""
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        connection_status["last_heartbeat"] = time.time()
        connection_status["connected"] = True
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –ª–æ–≥ –¥–ª—è –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π
        logger.info(f"üîç –ü–æ–ª—É—á–µ–Ω–æ WebSocket —Å–æ–±—ã—Ç–∏–µ: {event}")
        
        if not event:
            logger.debug("–ü–æ–ª—É—á–µ–Ω–æ –ø—É—Å—Ç–æ–µ —Å–æ–±—ã—Ç–∏–µ")
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –∫–∞–Ω–∞–ª 'userEvents', —Ç–∞–∫ –∏ –∫–∞–Ω–∞–ª 'user'
        if event.get("channel") in ["userEvents", "user"]:
            evt = event.get("data", {})
            evt_type = evt.get("type")

            # --- –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: –º–∞—Å—Å–∏–≤—ã 'fills' –∏ 'orderUpdates' –≤–Ω—É—Ç—Ä–∏ userEvents ---
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ fills –∫–∞–∫ –º–∞—Å—Å–∏–≤–∞
            if isinstance(evt.get("fills"), list) and evt.get("fills"):
                for fill in evt["fills"]:
                    try:
                        wallet = (fill.get("user") or evt.get("user") or "").lower()
                        coin = convert_token_number_to_name(fill.get("coin"))
                        price = float(fill.get("px", 0) or 0)
                        size = float(fill.get("sz", 0) or 0)
                        size_usd = price * size
                        side = "LONG" if fill.get("side") == "B" else "SHORT"

                        direction_emoji = "üìà" if fill.get("side") == "B" else "üìâ"
                        if size_usd >= 1_000_000:
                            size_emoji = "üêã"
                        elif size_usd >= 500_000:
                            size_emoji = "ü¶à"
                        else:
                            size_emoji = "üêü"

                        logger.info(f"{size_emoji} –ù–æ–≤–∞—è —Å–¥–µ–ª–∫–∞(userEvents.fills): {wallet[:10]}... | {coin} | {direction_emoji} {side} | ${size_usd:,.2f}")

                        if not wallet:
                            continue

                        tracking_users = database.get_users_tracking_wallet(wallet)
                        for chat_id in tracking_users:
                            user_threshold = database.get_user_threshold(chat_id)
                            
                            # –î–ª—è –æ—Ä–¥–µ—Ä–æ–≤ –ø—Ä–∏–º–µ–Ω—è–µ–º —Ç–æ—Ç –∂–µ –ø–æ—Ä–æ–≥ –ø–æ –Ω–æ—Ç–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
                            if size_usd >= user_threshold:
                                try:
                                    if notification_queue is not None:
                                        notification_queue.put_nowait({
                                            "chat_id": chat_id,
                                            "kind": "fill",
                                            # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π payload –ø–æ–¥ format_fill_message
                                            "payload": {"data": {"type": "fill", "data": fill}},
                                            "timestamp": time.time(),
                                        })
                                    else:
                                        logger.warning("‚ö†Ô∏è –û—á–µ—Ä–µ–¥—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                                except asyncio.QueueFull:
                                    logger.warning(f"‚ö†Ô∏è –û—á–µ—Ä–µ–¥—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
                            else:
                                logger.debug(f"üîï –°–¥–µ–ª–∫–∞ ${size_usd:,.2f} –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞ ${user_threshold:,.0f} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
                    except Exception as inner_e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ fill –≤ –º–∞—Å—Å–∏–≤–µ: {inner_e}", exc_info=True)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ orderUpdates –∫–∞–∫ –º–∞—Å—Å–∏–≤–∞
            if isinstance(evt.get("orderUpdates"), list) and evt.get("orderUpdates"):
                for update in evt["orderUpdates"]:
                    try:
                        order_wrapper = update or {}
                        action = None
                        if "placed" in order_wrapper:
                            action = "placed"
                            details = order_wrapper.get("placed", {}) or {}
                        elif "canceled" in order_wrapper:
                            action = "canceled"
                            details = order_wrapper.get("canceled", {}) or {}
                        elif "cancelled" in order_wrapper:
                            action = "canceled"
                            details = order_wrapper.get("cancelled", {}) or {}
                        else:
                            details = {}

                        if not details:
                            logger.debug("–ü–æ–ª—É—á–µ–Ω —ç–ª–µ–º–µ–Ω—Ç orderUpdates –±–µ–∑ –ø–æ–ª–µ–π placed/canceled ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é")
                            continue

                        wallet = (details.get("user") or order_wrapper.get("user") or evt.get("user") or "").lower()
                        coin = convert_token_number_to_name(details.get("coin") or order_wrapper.get("coin") or evt.get("coin") or "?")
                        price = float(details.get("px", 0) or 0)
                        size = float(details.get("sz", 0) or 0)
                        size_usd = price * size if price and size else 0.0
                        side = "LONG" if (details.get("side") or "").upper() in ("B", "BUY", "LONG") else "SHORT"

                        if action == "placed":
                            act_emoji = "üìù"
                            act_text = "–û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â—ë–Ω"
                        else:
                            act_emoji = "üóëÔ∏è"
                            act_text = "–û—Ä–¥–µ—Ä –æ—Ç–º–µ–Ω—ë–Ω"

                        logger.info(f"{act_emoji} {act_text} (userEvents.orderUpdates): {wallet[:10]}... | {coin} | {side} | ${size_usd:,.2f}")

                        if not wallet:
                            continue

                        tracking_users = database.get_users_tracking_wallet(wallet)
                        for chat_id in tracking_users:
                            order_threshold = database.get_user_order_threshold(chat_id)
                            if size_usd >= order_threshold:
                                try:
                                    if notification_queue is not None:
                                        notification_queue.put_nowait({
                                            "chat_id": chat_id,
                                            "kind": "order",
                                            "order_action": action,
                                            # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π payload –ø–æ–¥ format_order_message
                                            "payload": {"data": {"type": "orderUpdate", "data": {action if action != "cancelled" else "canceled": details}}},
                                            "timestamp": time.time(),
                                        })
                                    else:
                                        logger.warning("‚ö†Ô∏è –û—á–µ—Ä–µ–¥—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                                except asyncio.QueueFull:
                                    logger.warning(f"‚ö†Ô∏è –û—á–µ—Ä–µ–¥—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
                            else:
                                logger.debug(f"üîï –û—Ä–¥–µ—Ä ${size_usd:,.2f} –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞ ${order_threshold:,.0f} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
                    except Exception as inner_e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ orderUpdate –≤ –º–∞—Å—Å–∏–≤–µ: {inner_e}", exc_info=True)

            # --- –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è ---
            # 1) –ò—Å–ø–æ–ª–Ω–µ–Ω–∏—è (fills)
            if evt_type == "fill":
                fill = evt["data"]
                wallet = (fill.get("user") or "").lower()
                coin = convert_token_number_to_name(fill["coin"])
                price = float(fill.get("px", 0) or 0)
                size = float(fill.get("sz", 0) or 0)
                size_usd = price * size
                side = "LONG" if fill.get("side") == "B" else "SHORT"

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –ª–æ–≥–æ–≤
                direction_emoji = "üìà" if fill.get("side") == "B" else "üìâ"
                if size_usd >= 1_000_000:
                    size_emoji = "üêã"
                elif size_usd >= 500_000:
                    size_emoji = "ü¶à"
                else:
                    size_emoji = "üêü"

                logger.info(f"{size_emoji} –ù–æ–≤–∞—è —Å–¥–µ–ª–∫–∞: {wallet[:10]}... | {coin} | {direction_emoji} {side} | ${size_usd:,.2f}")

                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—â–∏—Ö —ç—Ç–æ—Ç –∫–æ—à–µ–ª–µ–∫
                tracking_users = database.get_users_tracking_wallet(wallet)
                
                for chat_id in tracking_users:
                    user_threshold = database.get_user_threshold(chat_id)
                    
                    if size_usd >= user_threshold:
                        logger.info(f"üîî –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id} (–ø–æ—Ä–æ–≥: ${user_threshold:,.0f})")
                        try:
                            if notification_queue is not None:
                                notification_queue.put_nowait({
                                    "chat_id": chat_id,
                                    "kind": "fill",
                                    "payload": event,
                                    "timestamp": time.time(),
                                })
                            else:
                                logger.warning("‚ö†Ô∏è –û—á–µ—Ä–µ–¥—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                        except asyncio.QueueFull:
                            logger.warning(f"‚ö†Ô∏è –û—á–µ—Ä–µ–¥—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
                    else:
                        logger.debug(f"üîï –°–¥–µ–ª–∫–∞ ${size_usd:,.2f} –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞ ${user_threshold:,.0f} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")

            # 2) –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤ (—Ä–∞–∑–º–µ—â–µ–Ω–∏–µ / –æ—Ç–º–µ–Ω–∞)
            elif evt_type in ("orderUpdate", "order_update", "order"):  # –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
                order_wrapper = evt.get("data", {}) or {}
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
                action = None
                if "placed" in order_wrapper:
                    action = "placed"
                    details = order_wrapper.get("placed", {}) or {}
                elif "canceled" in order_wrapper:
                    action = "canceled"
                    details = order_wrapper.get("canceled", {}) or {}
                elif "cancelled" in order_wrapper:  # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –±—Ä–∏—Ç–∞–Ω—Å–∫–∞—è –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—è
                    action = "canceled"
                    details = order_wrapper.get("cancelled", {}) or {}
                else:
                    details = {}

                if not details:
                    logger.debug("–ü–æ–ª—É—á–µ–Ω orderUpdate –±–µ–∑ –ø–æ–ª–µ–π placed/canceled ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é")
                    return

                wallet = (details.get("user") or order_wrapper.get("user") or "").lower()
                coin = convert_token_number_to_name(details.get("coin") or order_wrapper.get("coin") or "?")
                price = float(details.get("px", 0) or 0)
                size = float(details.get("sz", 0) or 0)
                size_usd = price * size if price and size else 0.0
                side = "LONG" if details.get("side") == "B" else "SHORT"

                # –≠–º–æ–¥–∑–∏ –∏ —Ç–µ–∫—Å—Ç –¥–ª—è –ª–æ–≥–æ–≤
                if action == "placed":
                    act_emoji = "üìù"
                    act_text = "–û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â—ë–Ω"
                else:
                    act_emoji = "üóëÔ∏è"
                    act_text = "–û—Ä–¥–µ—Ä –æ—Ç–º–µ–Ω—ë–Ω"

                logger.info(f"{act_emoji} {act_text}: {wallet[:10]}... | {coin} | {side} | ${size_usd:,.2f}")

                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–æ—à–µ–ª—å–∫–∞
                if not wallet:
                    logger.debug("OrderUpdate –±–µ–∑ –ø–æ–ª—è user ‚Äî –ø—Ä–æ–ø—É—Å–∫")
                    return

                tracking_users = database.get_users_tracking_wallet(wallet)
                for chat_id in tracking_users:
                    order_threshold = database.get_user_order_threshold(chat_id)

                    # –î–ª—è –æ—Ä–¥–µ—Ä–æ–≤ –ø—Ä–∏–º–µ–Ω—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ order_threshold
                    if size_usd >= order_threshold:
                         try:
                             if notification_queue is not None:
                                 notification_queue.put_nowait({
                                     "chat_id": chat_id,
                                     "kind": "order",
                                     "order_action": action,
                                     "payload": event,
                                     "timestamp": time.time(),
                                 })
                             else:
                                 logger.warning("‚ö†Ô∏è –û—á–µ—Ä–µ–¥—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                         except asyncio.QueueFull:
                             logger.warning(f"‚ö†Ô∏è –û—á–µ—Ä–µ–¥—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
                    else:
                        logger.debug(f"üîï –û—Ä–¥–µ—Ä ${size_usd:,.2f} –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞ ${order_threshold:,.0f} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
                     
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ on_user_event: {e}", exc_info=True)


def on_connection_status_change(connected: bool):
    """Callback –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket."""
    connection_status["connected"] = connected
    if connected:
        logger.info("üü¢ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    else:
        logger.warning("üî¥ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ")


def _safe_unsubscribe(ws: WebsocketManager, wallet: str):
    """–ü—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –∫–æ—à–µ–ª—å–∫–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –Ω–µ—Ñ–∞—Ç–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏.
    –ï—Å–ª–∏ –º–µ—Ç–æ–¥ unsubscribe –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ SDK, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º.
    """
    try:
        if hasattr(ws, "unsubscribe"):
            ws.unsubscribe({"type": "userEvents", "user": wallet})
            logger.info(f"üîï –û—Ç–ø–∏—Å–∫–∞ –æ—Ç –∫–æ—à–µ–ª—å–∫–∞: {wallet[:10]}...")
        else:
            logger.warning("‚ö†Ô∏è –ú–µ—Ç–æ–¥ unsubscribe –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ WebsocketManager ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é –ø—Ä—è–º—É—é –æ—Ç–ø–∏—Å–∫—É")
        time.sleep(SUBSCRIBE_PAUSE_SEC)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç {wallet[:10]}...: {e}")


def _safe_subscribe(ws: WebsocketManager, wallet: str):
    """–ü—ã—Ç–∞–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ—à–µ–ª–µ–∫, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –Ω–µ—Ñ–∞—Ç–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏."""
    try:
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ userEvents –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è orderUpdates
        ws.subscribe({"type": "userEvents", "user": wallet}, on_user_event)
        logger.info(f"üîî –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ userEvents –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞: {wallet[:10]}...")
        time.sleep(SUBSCRIBE_PAUSE_SEC)
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ userFills –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è fills
        ws.subscribe({"type": "userFills", "user": wallet}, on_user_event)
        logger.info(f"üîî –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ userFills –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞: {wallet[:10]}...")
        time.sleep(SUBSCRIBE_PAUSE_SEC)
    except Exception as e:
        error_msg = str(e)
        if "multiple times" in error_msg or "already subscribed" in error_msg.lower():
            logger.debug(f"üìù –ö–æ—à–µ–ª–µ–∫ {wallet[:10]}... —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {wallet[:10]}...: {e}")


def _recreate_ws(ws: Optional[WebsocketManager]) -> Optional[WebsocketManager]:
    """–ü–µ—Ä–µc–æ–∑–¥–∞–µ—Ç WebSocketManager, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã–≤–∞—è —Å—Ç–∞—Ä—ã–π, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ."""
    try:
        if ws is not None:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            try:
                if hasattr(ws, "close"):
                    ws.close()
                    logger.info("üîå –°—Ç–∞—Ä—ã–π WebSocket –∑–∞–∫—Ä—ã—Ç")
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
                if hasattr(ws, "stop_event") and ws.stop_event:
                    ws.stop_event.set()
                # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
                time.sleep(1)
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã—Ç—å WS: {e}")
    except Exception as e:
        logger.debug(f"–ì—Ä–µ–π—Å—Ñ—É–ª –∑–∞–∫—Ä—ã—Ç–∏–µ WS-–æ–±–µ—Ä—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π: {e}")

    try:
        from hyperliquid.utils.constants import MAINNET_API_URL
        ws_new = WebsocketManager(base_url=MAINNET_API_URL)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º callback –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if hasattr(ws_new, 'set_connection_callback'):
            ws_new.set_connection_callback(on_connection_status_change)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        ws_new.start()
        logger.info("‚úÖ WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–∑–¥–∞–Ω –∏ –∑–∞–ø—É—â–µ–Ω")
        
        # –ñ–¥–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        max_wait = 15  # —É–≤–µ–ª–∏—á–µ–Ω –¥–æ 15 —Å–µ–∫—É–Ω–¥
        wait_time = 0
        connection_established = False
        while not connection_established and wait_time < max_wait:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Å–ª–æ–≤–∏–π –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            ws_ready = getattr(ws_new, 'ws_ready', False)
            is_alive = getattr(ws_new, 'is_alive', lambda: False)()
            
            if ws_ready and is_alive:
                connection_established = True
                logger.info("üü¢ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                connection_status["connected"] = True
                connection_status["last_heartbeat"] = time.time()
                break
            
            time.sleep(0.5)
            wait_time += 0.5
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
            if int(wait_time) % 3 == 0 and wait_time > 0:
                logger.debug(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è... {wait_time:.1f}—Å (ws_ready: {ws_ready}, is_alive: {is_alive})")
        
        if not connection_established:
            logger.warning(f"üî¥ WebSocket –Ω–µ —Å–º–æ–≥ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∑–∞ {max_wait}—Å")
            connection_status["connected"] = False
            # –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None —Å—Ä–∞–∑—É, –¥–∞–µ–º —à–∞–Ω—Å —Ä–∞–±–æ—Ç–∞—Ç—å —á–∞—Å—Ç–∏—á–Ω–æ
            logger.info("‚ö†Ô∏è –í–æ–∑–≤—Ä–∞—â–∞–µ–º WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏ —Ä–∞–±–æ—Ç—ã –≤ —á–∞—Å—Ç–∏—á–Ω–æ–º —Ä–µ–∂–∏–º–µ")
        
        return ws_new
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")
        return None


def monitor_worker():
    """–§–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫, —É–ø—Ä–∞–≤–ª—è—é—â–∏–π –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ WebSocket."""
    global subscribed_wallets, ws_manager
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ WebSocket...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    ws = _recreate_ws(None)
    if ws is None:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä")
        return
    
    ws_manager = ws  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è graceful shutdown
    retry_count = 0
    max_retries = 5
    
    while not shutdown_event.is_set():
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∫–æ—à–µ–ª—å–∫–æ–≤ –∏–∑ –ë–î
            wallets_in_db = database.get_all_unique_wallets()
            logger.debug(f"üìä –ö–æ—à–µ–ª—å–∫–æ–≤ –≤ –ë–î: {len(wallets_in_db)}, –ø–æ–¥–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–æ: {len(subscribed_wallets)}")
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –Ω–æ–≤—ã–µ –∫–æ—à–µ–ª—å–∫–∏ —Å rate limiting
            new_wallets = wallets_in_db - subscribed_wallets
            if new_wallets:
                logger.info(f"‚ûï –ù–æ–≤—ã–µ –∫–æ—à–µ–ª—å–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: {len(new_wallets)}")
                for wallet in new_wallets:
                    if wallet not in subscribed_wallets:  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                        if rate_limiter.can_make_request():
                            _safe_subscribe(ws, wallet)
                            subscribed_wallets.add(wallet)
                            rate_limiter.add_request()
                        else:
                            logger.debug(f"‚è≥ Rate limit –¥–æ—Å—Ç–∏–≥–Ω—É—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {wallet[:10]}...")
                            break
            
            # –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤
            removed_wallets = subscribed_wallets - wallets_in_db
            if removed_wallets:
                logger.info(f"‚ûñ –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏: {len(removed_wallets)} –∫–æ—à–µ–ª—å–∫–æ–≤")
                for wallet in removed_wallets:
                    _safe_unsubscribe(ws, wallet)
                    subscribed_wallets.discard(wallet)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            current_time = time.time()
            idle_sec = current_time - (connection_status["last_heartbeat"] or 0)
            ws_connected = ws and ws.ws_ready and ws.is_alive()

            if ws_connected and connection_status["connected"]:
                if idle_sec > HEARTBEAT_WARN_SEC:  # –¥–æ–ª–≥–æ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
                    logger.warning("‚ö†Ô∏è –î–æ–ª–≥–æ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç WebSocket, –≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º")
                # –ï—Å–ª–∏ —Ç–∏—à–∏–Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–∞—è ‚Äî –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å WS –∏ —Ä–µ—Å–∞–±—Å–∫—Ä–∞–π–±–∏—Ç—å—Å—è
                if idle_sec > HEARTBEAT_RECONNECT_SEC:
                    logger.warning("üîÑ WS –¥–æ–ª–≥–æ –º–æ–ª—á–∏—Ç ‚Äî –ø–µ—Ä–µ—Å–æ–∑–¥–∞—é —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ —Ä–µ—Å–∞–±—Å–∫—Ä–∞–π–±–ª—é—Å—å")
                    ws_new = _recreate_ws(ws)
                    if ws_new is not None:
                        ws = ws_new
                        ws_manager = ws_new  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
                        # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –∏ —Ä–µ—Å–∞–±—Å–∫—Ä–∞–π–±–∏–º—Å—è
                        subscribed_wallets.clear()
                        for wallet in wallets_in_db:
                            if rate_limiter.can_make_request():
                                _safe_subscribe(ws, wallet)
                                subscribed_wallets.add(wallet)
                                rate_limiter.add_request()
                            else:
                                logger.debug(f"‚è≥ Rate limit –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ø—Ä–∏ —Ä–µ—Å–∞–±—Å–∫—Ä–∞–π–±–µ –Ω–∞ {wallet[:10]}...")
                                break
                        retry_count = 0
                    else:
                        retry_count += 1
                        if retry_count >= MAX_RECONNECT_ATTEMPTS:
                            logger.error(f"‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ({MAX_RECONNECT_ATTEMPTS}). –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞.")
                            retry_count = 0
                            time.sleep(RECONNECT_MAX_DELAY_SEC)  # –¥–ª–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–±—Ä–æ—Å–æ–º
                        else:
                            # —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π backoff —Å –¥–∂–∏—Ç—Ç–µ—Ä–æ–º
                            delay = min(RECONNECT_BASE_DELAY_SEC * (2 ** min(retry_count, 5)), RECONNECT_MAX_DELAY_SEC)
                            jitter = random.uniform(0, 0.3 * delay)
                            sleep_time = delay + jitter
                            logger.info(f"‚è∞ –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Ä–µ–∫–æ–Ω–Ω–µ–∫—Ç–æ–º –ø–æ—Å–ª–µ —Ç–∏—à–∏–Ω—ã: {sleep_time:.1f}—Å (–ø–æ–ø—ã—Ç–∫–∞ #{retry_count}/{MAX_RECONNECT_ATTEMPTS})")
                            time.sleep(sleep_time)
            else:
                # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç –¥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã –Ω–æ–º–µ—Ä –ø–æ–ø—ã—Ç–∫–∏ –≤ –ª–æ–≥–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–º—É
                retry_count += 1
                if retry_count >= MAX_RECONNECT_ATTEMPTS:
                    logger.error(f"‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ({MAX_RECONNECT_ATTEMPTS}). –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞.")
                    retry_count = 0
                    time.sleep(RECONNECT_MAX_DELAY_SEC)  # –¥–ª–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–±—Ä–æ—Å–æ–º
                    continue
                    
                if not ws_connected:
                    logger.warning(f"üî¥ WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω (ws_ready: {ws.ws_ready if ws else 'None'}, is_alive: {ws.is_alive() if ws else 'None'}), –ø–æ–ø—ã—Ç–∫–∞ #{retry_count}/{MAX_RECONNECT_ATTEMPTS}")
                else:
                    logger.warning(f"üî¥ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω, –Ω–æ —Å—Ç–∞—Ç—É—Å connection_status –Ω–µ–≤–µ—Ä–Ω—ã–π, –ø–æ–ø—ã—Ç–∫–∞ #{retry_count}/{MAX_RECONNECT_ATTEMPTS}")
                    
                ws_new = _recreate_ws(ws)
                if ws_new is not None:
                    ws = ws_new
                    ws_manager = ws_new  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
                    # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –∏ —Ä–µ—Å–∞–±—Å–∫—Ä–∞–π–±–∏–º—Å—è
                    subscribed_wallets.clear()
                    for wallet in wallets_in_db:
                        if rate_limiter.can_make_request():
                            _safe_subscribe(ws, wallet)
                            subscribed_wallets.add(wallet)
                            rate_limiter.add_request()
                        else:
                            logger.debug(f"‚è≥ Rate limit –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ø—Ä–∏ —Ä–µ—Å–∞–±—Å–∫—Ä–∞–π–±–µ –Ω–∞ {wallet[:10]}...")
                            break
                    retry_count = 0
                else:
                    # —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π backoff —Å –¥–∂–∏—Ç—Ç–µ—Ä–æ–º
                    delay = min(RECONNECT_BASE_DELAY_SEC * (2 ** min(retry_count, 5)), RECONNECT_MAX_DELAY_SEC)
                    jitter = random.uniform(0, 0.3 * delay)
                    sleep_time = delay + jitter
                    logger.info(f"‚è∞ –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Ä–µ–∫–æ–Ω–Ω–µ–∫—Ç–æ–º: {sleep_time:.1f}—Å (–ø–æ–ø—ã—Ç–∫–∞ #{retry_count})")
                    time.sleep(sleep_time)
                
                if retry_count >= max_retries:
                    logger.error(f"üí• –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ({max_retries})")
                    logger.error("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
                    break
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –ª–æ–≥–∞—Ö –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            if int(current_time) % 300 == 0:  # –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                connected_status = "üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω" if connection_status['connected'] else "üî¥ –û—Ç–∫–ª—é—á–µ–Ω"
                logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:")
                logger.info(f"   WebSocket: {connected_status}")
                logger.info(f"   üîî –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {len(subscribed_wallets)}")
                queue_size = notification_queue.qsize() if notification_queue is not None else 0
                logger.info(f"   üì¨ –û—á–µ—Ä–µ–¥—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {queue_size} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            time.sleep(CHECK_INTERVAL_SEC)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ N —Å–µ–∫—É–Ω–¥
            
        except KeyboardInterrupt:
            logger.info("‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
            break
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ monitor_worker: {e}", exc_info=True)
            retry_count += 1
            
            if retry_count >= max_retries:
                logger.error("üí• –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –≤ monitor_worker, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞")
                break
            
            sleep_time = min(30 * retry_count, 300)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–∞—É–∑—É, –Ω–æ –Ω–µ –±–æ–ª—å—à–µ 5 –º–∏–Ω—É—Ç
            logger.info(f"‚è∞ –ü–∞—É–∑–∞ {sleep_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
            time.sleep(sleep_time)
    
    logger.error("‚õî –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ WebSocket –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


def start_monitoring():
    """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
    global monitor_thread
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ —Ñ–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    if shutdown_event.is_set():
        logger.warning("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω")
        return False
    
    if monitor_thread is None or not monitor_thread.is_alive():
        try:
            monitor_thread = threading.Thread(target=monitor_worker, daemon=True, name="WebSocketMonitor")
            monitor_thread.start()
            logger.info("‚úÖ –ü–æ—Ç–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ WebSocket –∑–∞–ø—É—â–µ–Ω")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ—Ç–æ–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            return False
    else:
        logger.info("‚ÑπÔ∏è –ü–æ—Ç–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω")
        return True


def stop_monitoring():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
    global monitor_thread, ws_manager
    
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ WebSocket...")
    shutdown_event.set()
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    if ws_manager:
        try:
            ws_manager.close()
            logger.info("‚úÖ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ WebSocket: {e}")
    
    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞
    if monitor_thread and monitor_thread.is_alive():
        monitor_thread.join(timeout=10)
        if monitor_thread.is_alive():
            logger.warning("‚ö†Ô∏è –ü–æ—Ç–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∑–∞ 10 —Å–µ–∫—É–Ω–¥")
        else:
            logger.info("‚úÖ –ü–æ—Ç–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    return True

def get_monitoring_stats():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
    return {
        "connected": connection_status["connected"],
        "subscribed_wallets": len(subscribed_wallets),
        "queue_size": notification_queue.qsize() if notification_queue is not None else 0,
        "last_heartbeat": connection_status["last_heartbeat"],
        "rate_limiter_requests": rate_limiter.current_requests,
        "rate_limiter_max": rate_limiter.max_requests_per_minute,
        "shutdown_requested": shutdown_event.is_set(),
        "monitor_thread_alive": monitor_thread.is_alive() if monitor_thread else False
    }