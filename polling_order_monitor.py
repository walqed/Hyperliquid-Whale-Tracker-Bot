#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ä–¥–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ REST API –∑–∞–ø—Ä–æ—Å—ã (polling)
–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ WebSocket –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É
"""

import time
import logging
import requests
from typing import Dict, List, Any, Optional
from hyperliquid.info import Info
from hyperliquid.utils.constants import MAINNET_API_URL

logger = logging.getLogger(__name__)

class OrderPollingMonitor:
    def __init__(self, wallet_address: str, check_interval: int = 5):
        self.wallet_address = wallet_address.lower()
        self.check_interval = check_interval
        self.info = Info(MAINNET_API_URL, skip_ws=True)
        self.last_orders = {}
        self.last_fills = {}
        self.notifications = []
        self.running = False
        
    def get_user_orders(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            orders = self.info.open_orders(self.wallet_address)
            return orders or []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤: {e}")
            return []
    
    def get_user_fills(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            fills = self.info.user_fills(self.wallet_address)
            return fills or []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–π: {e}")
            return []
    
    def detect_new_orders(self, current_orders: List[Dict]) -> List[Dict]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–æ–≤—ã–µ –æ—Ä–¥–µ—Ä–∞"""
        new_orders = []
        current_order_ids = set()
        
        for order in current_orders:
            order_id = order.get('oid')
            if order_id:
                current_order_ids.add(order_id)
                if order_id not in self.last_orders:
                    new_orders.append({
                        'action': 'placed',
                        'order': order,
                        'timestamp': time.time()
                    })
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
        canceled_order_ids = set(self.last_orders.keys()) - current_order_ids
        for canceled_id in canceled_order_ids:
            new_orders.append({
                'action': 'canceled',
                'order': self.last_orders[canceled_id],
                'timestamp': time.time()
            })
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –æ—Ä–¥–µ—Ä–æ–≤
        self.last_orders = {order.get('oid'): order for order in current_orders if order.get('oid')}
        
        return new_orders
    
    def detect_new_fills(self, current_fills: List[Dict]) -> List[Dict]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–æ–≤—ã–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è"""
        new_fills = []
        
        for fill in current_fills:
            fill_id = f"{fill.get('time', 0)}_{fill.get('oid', '')}_{fill.get('px', '')}_{fill.get('sz', '')}"
            
            if fill_id not in self.last_fills:
                new_fills.append({
                    'action': 'fill',
                    'fill': fill,
                    'timestamp': time.time()
                })
                self.last_fills[fill_id] = fill
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100)
        if len(self.last_fills) > 100:
            sorted_fills = sorted(self.last_fills.items(), key=lambda x: x[1].get('time', 0))
            self.last_fills = dict(sorted_fills[-100:])
        
        return new_fills
    
    def format_order_notification(self, order_event: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ä–¥–µ—Ä–µ"""
        action = order_event['action']
        order = order_event['order']
        
        coin = order.get('coin', '?')
        side = 'LONG' if order.get('side') == 'B' else 'SHORT'
        price = float(order.get('limitPx', 0) or 0)
        size = float(order.get('sz', 0) or 0)
        size_usd = price * size if price and size else 0.0
        
        action_emoji = "üìù" if action == "placed" else "üóëÔ∏è"
        action_text = "–û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â—ë–Ω" if action == "placed" else "–û—Ä–¥–µ—Ä –æ—Ç–º–µ–Ω—ë–Ω"
        
        return f"{action_emoji} {action_text}: {coin} | {side} | ${size_usd:,.2f} | –¶–µ–Ω–∞: ${price:,.4f}"
    
    def format_fill_notification(self, fill_event: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏"""
        fill = fill_event['fill']
        
        coin = fill.get('coin', '?')
        side = 'LONG' if fill.get('side') == 'B' else 'SHORT'
        price = float(fill.get('px', 0) or 0)
        size = float(fill.get('sz', 0) or 0)
        size_usd = price * size
        
        direction_emoji = "üìà" if fill.get('side') == 'B' else "üìâ"
        if size_usd >= 1_000_000:
            size_emoji = "üêã"
        elif size_usd >= 500_000:
            size_emoji = "ü¶à"
        else:
            size_emoji = "üêü"
        
        return f"{size_emoji} –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞: {coin} | {direction_emoji} {side} | ${size_usd:,.2f} | –¶–µ–Ω–∞: ${price:,.4f}"
    
    def start_monitoring(self, duration: int = 60) -> List[Dict]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
        logger.info(f"üîî –ó–∞–ø—É—Å–∫ polling –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è {self.wallet_address[:10]}... –Ω–∞ {duration} —Å–µ–∫—É–Ω–¥")
        
        self.running = True
        start_time = time.time()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        initial_orders = self.get_user_orders()
        initial_fills = self.get_user_fills()
        
        self.last_orders = {order.get('oid'): order for order in initial_orders if order.get('oid')}
        for fill in initial_fills:
            fill_id = f"{fill.get('time', 0)}_{fill.get('oid', '')}_{fill.get('px', '')}_{fill.get('sz', '')}"
            self.last_fills[fill_id] = fill
        
        logger.info(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {len(self.last_orders)} –æ—Ä–¥–µ—Ä–æ–≤, {len(self.last_fills)} –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–π")
        
        try:
            while self.running and (time.time() - start_time) < duration:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ä–¥–µ—Ä–∞
                current_orders = self.get_user_orders()
                new_order_events = self.detect_new_orders(current_orders)
                
                for event in new_order_events:
                    notification = self.format_order_notification(event)
                    logger.info(notification)
                    self.notifications.append({
                        'type': 'order',
                        'message': notification,
                        'timestamp': event['timestamp'],
                        'data': event
                    })
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
                current_fills = self.get_user_fills()
                new_fill_events = self.detect_new_fills(current_fills)
                
                for event in new_fill_events:
                    notification = self.format_fill_notification(event)
                    logger.info(notification)
                    self.notifications.append({
                        'type': 'fill',
                        'message': notification,
                        'timestamp': event['timestamp'],
                        'data': event
                    })
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
                elapsed = int(time.time() - start_time)
                if elapsed % 10 == 0 and elapsed > 0:
                    logger.info(f"‚è±Ô∏è  Polling –∞–∫—Ç–∏–≤–µ–Ω: {elapsed}—Å | –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {len(self.notifications)} | –û—Ä–¥–µ—Ä–æ–≤: {len(self.last_orders)}")
                
                time.sleep(self.check_interval)
                
        except KeyboardInterrupt:
            logger.info("‚èπÔ∏è  –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        finally:
            self.running = False
        
        logger.info(f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –°–æ–±—Ä–∞–Ω–æ {len(self.notifications)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        return self.notifications
    
    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        self.running = False

def test_polling_monitor():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç polling –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
    target_address = "0x162cc7c861ebd0c06b3d72319201150482518185"
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s'
    )
    
    monitor = OrderPollingMonitor(target_address, check_interval=3)
    
    logger.info("=" * 80)
    logger.info(f"üîç –¢–ï–°–¢ POLLING –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê: {target_address}")
    logger.info("=" * 80)
    
    notifications = monitor.start_monitoring(duration=30)  # 30 —Å–µ–∫—É–Ω–¥
    
    logger.info("\nüì¨ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê:")
    logger.info("-" * 60)
    
    if notifications:
        for i, notif in enumerate(notifications, 1):
            timestamp = time.strftime('%H:%M:%S', time.localtime(notif['timestamp']))
            logger.info(f"{i:2d}. [{timestamp}] {notif['message']}")
    else:
        logger.info("üì≠ –ù–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
    
    logger.info("\n" + "=" * 80)
    logger.info("‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù")
    logger.info("=" * 80)

if __name__ == "__main__":
    test_polling_monitor()